/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using DynamicLeveledLists.Internals;
using ReactiveUI;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace DynamicLeveledLists
{
    #region Class
    public partial class CountSettings : 
        LoquiNotifyingObject,
        ICountSettings,
        ILoquiObject<CountSettings>,
        ILoquiObjectSetter,
        IEquatable<CountSettings>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CountSettings_Registration.Instance;
        public static CountSettings_Registration Registration => CountSettings_Registration.Instance;

        #region Ctor
        public CountSettings()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Enabled
        private Boolean _Enabled;
        public Boolean Enabled
        {
            get => this._Enabled;
            set => this.RaiseAndSetIfChanged(ref this._Enabled, value, nameof(Enabled));
        }
        #endregion
        #region MaxToSpawn
        private Byte _MaxToSpawn;
        public Byte MaxToSpawn
        {
            get => this._MaxToSpawn;
            set => this.RaiseAndSetIfChanged(ref this._MaxToSpawn, value, nameof(MaxToSpawn));
        }
        #endregion
        #region BasePercent
        private Percent _BasePercent;
        public Percent BasePercent
        {
            get => this._BasePercent;
            set => this.RaiseAndSetIfChanged(ref this._BasePercent, value, nameof(BasePercent));
        }
        #endregion
        #region FinalPercent
        private Percent _FinalPercent;
        public Percent FinalPercent
        {
            get => this._FinalPercent;
            set => this.RaiseAndSetIfChanged(ref this._FinalPercent, value, nameof(FinalPercent));
        }
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => CountSettingsCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => CountSettingsCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => CountSettingsCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            CountSettingsCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<CountSettings>.GetEqualsMask(CountSettings rhs) => CountSettingsCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ICountSettingsGetter>.GetEqualsMask(ICountSettingsGetter rhs) => CountSettingsCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return CountSettingsCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            CountSettings_Mask<bool> printMask = null)
        {
            return CountSettingsCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            CountSettingsCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public CountSettings_Mask<bool> GetHasBeenSetMask()
        {
            return CountSettingsCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is CountSettings rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CountSettings rhs)
        {
            if (rhs == null) return false;
            if (this.Enabled != rhs.Enabled) return false;
            if (this.MaxToSpawn != rhs.MaxToSpawn) return false;
            if (!this.BasePercent.Equals(rhs.BasePercent)) return false;
            if (!this.FinalPercent.Equals(rhs.FinalPercent)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Enabled).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(MaxToSpawn).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BasePercent).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FinalPercent).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static CountSettings Create_Xml(
            XElement root,
            CountSettings_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static CountSettings Create_Xml(
            XElement root,
            out CountSettings_ErrorMask errorMask,
            bool doMasks = true,
            CountSettings_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = CountSettings_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static CountSettings Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new CountSettings();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static CountSettings Create_Xml(
            string path,
            CountSettings_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static CountSettings Create_Xml(
            string path,
            out CountSettings_ErrorMask errorMask,
            CountSettings_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CountSettings Create_Xml(
            Stream stream,
            CountSettings_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static CountSettings Create_Xml(
            Stream stream,
            out CountSettings_ErrorMask errorMask,
            CountSettings_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out CountSettings_ErrorMask errorMask,
            CountSettings_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = CountSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<CountSettings>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out CountSettings_ErrorMask errorMask,
            CountSettings_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out CountSettings_ErrorMask errorMask,
            CountSettings_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out CountSettings_ErrorMask errorMask,
            bool doMasks = true,
            CountSettings_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CountSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out CountSettings_ErrorMask errorMask,
            CountSettings_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out CountSettings_ErrorMask errorMask,
            CountSettings_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            string name = null,
            CountSettings_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            CountSettingsCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            CountSettings item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Enabled":
                    try
                    {
                        errorMask?.PushIndex((int)CountSettings_FieldIndex.Enabled);
                        if (BooleanXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Boolean EnabledParse,
                            errorMask: errorMask))
                        {
                            item.Enabled = EnabledParse;
                        }
                        else
                        {
                            item.Enabled = default(Boolean);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaxToSpawn":
                    try
                    {
                        errorMask?.PushIndex((int)CountSettings_FieldIndex.MaxToSpawn);
                        if (ByteXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Byte MaxToSpawnParse,
                            errorMask: errorMask))
                        {
                            item.MaxToSpawn = MaxToSpawnParse;
                        }
                        else
                        {
                            item.MaxToSpawn = default(Byte);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BasePercent":
                    try
                    {
                        errorMask?.PushIndex((int)CountSettings_FieldIndex.BasePercent);
                        if (PercentXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Percent BasePercentParse,
                            errorMask: errorMask))
                        {
                            item.BasePercent = BasePercentParse;
                        }
                        else
                        {
                            item.BasePercent = default(Percent);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FinalPercent":
                    try
                    {
                        errorMask?.PushIndex((int)CountSettings_FieldIndex.FinalPercent);
                        if (PercentXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Percent FinalPercentParse,
                            errorMask: errorMask))
                        {
                            item.FinalPercent = FinalPercentParse;
                        }
                        else
                        {
                            item.FinalPercent = default(Percent);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((CountSettings_FieldIndex)index)
            {
                case CountSettings_FieldIndex.Enabled:
                case CountSettings_FieldIndex.MaxToSpawn:
                case CountSettings_FieldIndex.BasePercent:
                case CountSettings_FieldIndex.FinalPercent:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        public CountSettings Copy(
            CountSettings_CopyMask copyMask = null,
            ICountSettingsGetter def = null)
        {
            return CountSettings.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static CountSettings Copy(
            ICountSettings item,
            CountSettings_CopyMask copyMask = null,
            ICountSettingsGetter def = null)
        {
            CountSettings ret;
            if (item.GetType().Equals(typeof(CountSettings)))
            {
                ret = new CountSettings();
            }
            else
            {
                ret = (CountSettings)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CountSettings Copy_ToLoqui(
            ICountSettingsGetter item,
            CountSettings_CopyMask copyMask = null,
            ICountSettingsGetter def = null)
        {
            CountSettings ret;
            if (item.GetType().Equals(typeof(CountSettings)))
            {
                ret = new CountSettings() as CountSettings;
            }
            else
            {
                ret = (CountSettings)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ICountSettingsGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (ICountSettingsGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ICountSettingsGetter rhs,
            CountSettings_CopyMask copyMask,
            ICountSettingsGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ICountSettingsGetter rhs,
            out CountSettings_ErrorMask errorMask,
            CountSettings_CopyMask copyMask = null,
            ICountSettingsGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CountSettingsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = CountSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ICountSettingsGetter rhs,
            ErrorMaskBuilder errorMask,
            CountSettings_CopyMask copyMask = null,
            ICountSettingsGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            CountSettingsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            CountSettings_FieldIndex enu = (CountSettings_FieldIndex)index;
            switch (enu)
            {
                case CountSettings_FieldIndex.Enabled:
                    this.Enabled = (Boolean)obj;
                    break;
                case CountSettings_FieldIndex.MaxToSpawn:
                    this.MaxToSpawn = (Byte)obj;
                    break;
                case CountSettings_FieldIndex.BasePercent:
                    this.BasePercent = (Percent)obj;
                    break;
                case CountSettings_FieldIndex.FinalPercent:
                    this.FinalPercent = (Percent)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            CountSettingsCommon.Clear(this, cmds);
        }


        public static CountSettings Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new CountSettings();
            foreach (var pair in fields)
            {
                CopyInInternal_CountSettings(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_CountSettings(CountSettings obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out CountSettings_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case CountSettings_FieldIndex.Enabled:
                    obj.Enabled = (Boolean)pair.Value;
                    break;
                case CountSettings_FieldIndex.MaxToSpawn:
                    obj.MaxToSpawn = (Byte)pair.Value;
                    break;
                case CountSettings_FieldIndex.BasePercent:
                    obj.BasePercent = (Percent)pair.Value;
                    break;
                case CountSettings_FieldIndex.FinalPercent:
                    obj.FinalPercent = (Percent)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, CountSettings obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ICountSettings : ICountSettingsGetter, ILoquiClass<ICountSettings, ICountSettingsGetter>, ILoquiClass<CountSettings, ICountSettingsGetter>
    {
        new Boolean Enabled { get; set; }

        new Byte MaxToSpawn { get; set; }

        new Percent BasePercent { get; set; }

        new Percent FinalPercent { get; set; }

    }

    public partial interface ICountSettingsGetter : ILoquiObject
    {
        #region Enabled
        Boolean Enabled { get; }

        #endregion
        #region MaxToSpawn
        Byte MaxToSpawn { get; }

        #endregion
        #region BasePercent
        Percent BasePercent { get; }

        #endregion
        #region FinalPercent
        Percent FinalPercent { get; }

        #endregion

    }

    #endregion

}

namespace DynamicLeveledLists.Internals
{
    #region Field Index
    public enum CountSettings_FieldIndex
    {
        Enabled = 0,
        MaxToSpawn = 1,
        BasePercent = 2,
        FinalPercent = 3,
    }
    #endregion

    #region Registration
    public class CountSettings_Registration : ILoquiRegistration
    {
        public static readonly CountSettings_Registration Instance = new CountSettings_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_DynamicLeveledLists.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_DynamicLeveledLists.ProtocolKey,
            msgID: 4,
            version: 0);

        public const string GUID = "ea60eee8-33e9-45c9-816e-936ee6923ea5";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(CountSettings_Mask<>);

        public static readonly Type ErrorMaskType = typeof(CountSettings_ErrorMask);

        public static readonly Type ClassType = typeof(CountSettings);

        public static readonly Type GetterType = typeof(ICountSettingsGetter);

        public static readonly Type SetterType = typeof(ICountSettings);

        public static readonly Type CommonType = typeof(CountSettingsCommon);

        public const string FullName = "DynamicLeveledLists.CountSettings";

        public const string Name = "CountSettings";

        public const string Namespace = "DynamicLeveledLists";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ENABLED":
                    return (ushort)CountSettings_FieldIndex.Enabled;
                case "MAXTOSPAWN":
                    return (ushort)CountSettings_FieldIndex.MaxToSpawn;
                case "BASEPERCENT":
                    return (ushort)CountSettings_FieldIndex.BasePercent;
                case "FINALPERCENT":
                    return (ushort)CountSettings_FieldIndex.FinalPercent;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            CountSettings_FieldIndex enu = (CountSettings_FieldIndex)index;
            switch (enu)
            {
                case CountSettings_FieldIndex.Enabled:
                case CountSettings_FieldIndex.MaxToSpawn:
                case CountSettings_FieldIndex.BasePercent:
                case CountSettings_FieldIndex.FinalPercent:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            CountSettings_FieldIndex enu = (CountSettings_FieldIndex)index;
            switch (enu)
            {
                case CountSettings_FieldIndex.Enabled:
                case CountSettings_FieldIndex.MaxToSpawn:
                case CountSettings_FieldIndex.BasePercent:
                case CountSettings_FieldIndex.FinalPercent:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            CountSettings_FieldIndex enu = (CountSettings_FieldIndex)index;
            switch (enu)
            {
                case CountSettings_FieldIndex.Enabled:
                case CountSettings_FieldIndex.MaxToSpawn:
                case CountSettings_FieldIndex.BasePercent:
                case CountSettings_FieldIndex.FinalPercent:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            CountSettings_FieldIndex enu = (CountSettings_FieldIndex)index;
            switch (enu)
            {
                case CountSettings_FieldIndex.Enabled:
                    return "Enabled";
                case CountSettings_FieldIndex.MaxToSpawn:
                    return "MaxToSpawn";
                case CountSettings_FieldIndex.BasePercent:
                    return "BasePercent";
                case CountSettings_FieldIndex.FinalPercent:
                    return "FinalPercent";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            CountSettings_FieldIndex enu = (CountSettings_FieldIndex)index;
            switch (enu)
            {
                case CountSettings_FieldIndex.Enabled:
                case CountSettings_FieldIndex.MaxToSpawn:
                case CountSettings_FieldIndex.BasePercent:
                case CountSettings_FieldIndex.FinalPercent:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            CountSettings_FieldIndex enu = (CountSettings_FieldIndex)index;
            switch (enu)
            {
                case CountSettings_FieldIndex.Enabled:
                case CountSettings_FieldIndex.MaxToSpawn:
                case CountSettings_FieldIndex.BasePercent:
                case CountSettings_FieldIndex.FinalPercent:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            CountSettings_FieldIndex enu = (CountSettings_FieldIndex)index;
            switch (enu)
            {
                case CountSettings_FieldIndex.Enabled:
                    return typeof(Boolean);
                case CountSettings_FieldIndex.MaxToSpawn:
                    return typeof(Byte);
                case CountSettings_FieldIndex.BasePercent:
                    return typeof(Percent);
                case CountSettings_FieldIndex.FinalPercent:
                    return typeof(Percent);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class CountSettingsCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ICountSettings item,
            ICountSettingsGetter rhs,
            ICountSettingsGetter def,
            ErrorMaskBuilder errorMask,
            CountSettings_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Enabled ?? true)
            {
                errorMask?.PushIndex((int)CountSettings_FieldIndex.Enabled);
                try
                {
                    item.Enabled = rhs.Enabled;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.MaxToSpawn ?? true)
            {
                errorMask?.PushIndex((int)CountSettings_FieldIndex.MaxToSpawn);
                try
                {
                    item.MaxToSpawn = rhs.MaxToSpawn;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.BasePercent ?? true)
            {
                errorMask?.PushIndex((int)CountSettings_FieldIndex.BasePercent);
                try
                {
                    item.BasePercent = rhs.BasePercent;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FinalPercent ?? true)
            {
                errorMask?.PushIndex((int)CountSettings_FieldIndex.FinalPercent);
                try
                {
                    item.FinalPercent = rhs.FinalPercent;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ICountSettings obj,
            NotifyingFireParameters cmds = null)
        {
            CountSettings_FieldIndex enu = (CountSettings_FieldIndex)index;
            switch (enu)
            {
                case CountSettings_FieldIndex.Enabled:
                case CountSettings_FieldIndex.MaxToSpawn:
                case CountSettings_FieldIndex.BasePercent:
                case CountSettings_FieldIndex.FinalPercent:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ICountSettings obj,
            NotifyingUnsetParameters cmds = null)
        {
            CountSettings_FieldIndex enu = (CountSettings_FieldIndex)index;
            switch (enu)
            {
                case CountSettings_FieldIndex.Enabled:
                    obj.Enabled = default(Boolean);
                    break;
                case CountSettings_FieldIndex.MaxToSpawn:
                    obj.MaxToSpawn = default(Byte);
                    break;
                case CountSettings_FieldIndex.BasePercent:
                    obj.BasePercent = default(Percent);
                    break;
                case CountSettings_FieldIndex.FinalPercent:
                    obj.FinalPercent = default(Percent);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ICountSettings obj)
        {
            CountSettings_FieldIndex enu = (CountSettings_FieldIndex)index;
            switch (enu)
            {
                case CountSettings_FieldIndex.Enabled:
                case CountSettings_FieldIndex.MaxToSpawn:
                case CountSettings_FieldIndex.BasePercent:
                case CountSettings_FieldIndex.FinalPercent:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ICountSettingsGetter obj)
        {
            CountSettings_FieldIndex enu = (CountSettings_FieldIndex)index;
            switch (enu)
            {
                case CountSettings_FieldIndex.Enabled:
                    return obj.Enabled;
                case CountSettings_FieldIndex.MaxToSpawn:
                    return obj.MaxToSpawn;
                case CountSettings_FieldIndex.BasePercent:
                    return obj.BasePercent;
                case CountSettings_FieldIndex.FinalPercent:
                    return obj.FinalPercent;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ICountSettings item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Enabled = default(Boolean);
            item.MaxToSpawn = default(Byte);
            item.BasePercent = default(Percent);
            item.FinalPercent = default(Percent);
        }

        public static CountSettings_Mask<bool> GetEqualsMask(
            this ICountSettingsGetter item,
            ICountSettingsGetter rhs)
        {
            var ret = new CountSettings_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ICountSettingsGetter item,
            ICountSettingsGetter rhs,
            CountSettings_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Enabled = item.Enabled == rhs.Enabled;
            ret.MaxToSpawn = item.MaxToSpawn == rhs.MaxToSpawn;
            ret.BasePercent = item.BasePercent == rhs.BasePercent;
            ret.FinalPercent = item.FinalPercent == rhs.FinalPercent;
        }

        public static string ToString(
            this ICountSettingsGetter item,
            string name = null,
            CountSettings_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ICountSettingsGetter item,
            FileGeneration fg,
            string name = null,
            CountSettings_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(CountSettings)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(CountSettings)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Enabled ?? true)
                {
                    fg.AppendLine($"Enabled => {item.Enabled}");
                }
                if (printMask?.MaxToSpawn ?? true)
                {
                    fg.AppendLine($"MaxToSpawn => {item.MaxToSpawn}");
                }
                if (printMask?.BasePercent ?? true)
                {
                    fg.AppendLine($"BasePercent => {item.BasePercent}");
                }
                if (printMask?.FinalPercent ?? true)
                {
                    fg.AppendLine($"FinalPercent => {item.FinalPercent}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ICountSettingsGetter item,
            CountSettings_Mask<bool?> checkMask)
        {
            return true;
        }

        public static CountSettings_Mask<bool> GetHasBeenSetMask(ICountSettingsGetter item)
        {
            var ret = new CountSettings_Mask<bool>();
            ret.Enabled = true;
            ret.MaxToSpawn = true;
            ret.BasePercent = true;
            ret.FinalPercent = true;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            CountSettings item,
            bool doMasks,
            out CountSettings_ErrorMask errorMask,
            CountSettings_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CountSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            CountSettings item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "DynamicLeveledLists.CountSettings");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "DynamicLeveledLists.CountSettings");
            }
            if ((translationMask?.GetShouldTranslate((int)CountSettings_FieldIndex.Enabled) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Enabled),
                    item: item.Enabled,
                    fieldIndex: (int)CountSettings_FieldIndex.Enabled,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CountSettings_FieldIndex.MaxToSpawn) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.MaxToSpawn),
                    item: item.MaxToSpawn,
                    fieldIndex: (int)CountSettings_FieldIndex.MaxToSpawn,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CountSettings_FieldIndex.BasePercent) ?? true))
            {
                PercentXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.BasePercent),
                    item: item.BasePercent,
                    fieldIndex: (int)CountSettings_FieldIndex.BasePercent,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CountSettings_FieldIndex.FinalPercent) ?? true))
            {
                PercentXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FinalPercent),
                    item: item.FinalPercent,
                    fieldIndex: (int)CountSettings_FieldIndex.FinalPercent,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class CountSettings_Mask<T> : IMask<T>, IEquatable<CountSettings_Mask<T>>
    {
        #region Ctors
        public CountSettings_Mask()
        {
        }

        public CountSettings_Mask(T initialValue)
        {
            this.Enabled = initialValue;
            this.MaxToSpawn = initialValue;
            this.BasePercent = initialValue;
            this.FinalPercent = initialValue;
        }
        #endregion

        #region Members
        public T Enabled;
        public T MaxToSpawn;
        public T BasePercent;
        public T FinalPercent;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is CountSettings_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CountSettings_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Enabled, rhs.Enabled)) return false;
            if (!object.Equals(this.MaxToSpawn, rhs.MaxToSpawn)) return false;
            if (!object.Equals(this.BasePercent, rhs.BasePercent)) return false;
            if (!object.Equals(this.FinalPercent, rhs.FinalPercent)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Enabled?.GetHashCode());
            ret = ret.CombineHashCode(this.MaxToSpawn?.GetHashCode());
            ret = ret.CombineHashCode(this.BasePercent?.GetHashCode());
            ret = ret.CombineHashCode(this.FinalPercent?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Enabled)) return false;
            if (!eval(this.MaxToSpawn)) return false;
            if (!eval(this.BasePercent)) return false;
            if (!eval(this.FinalPercent)) return false;
            return true;
        }
        #endregion

        #region Translate
        public CountSettings_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new CountSettings_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(CountSettings_Mask<R> obj, Func<T, R> eval)
        {
            obj.Enabled = eval(this.Enabled);
            obj.MaxToSpawn = eval(this.MaxToSpawn);
            obj.BasePercent = eval(this.BasePercent);
            obj.FinalPercent = eval(this.FinalPercent);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(CountSettings_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, CountSettings_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(CountSettings_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Enabled ?? true)
                {
                    fg.AppendLine($"Enabled => {Enabled}");
                }
                if (printMask?.MaxToSpawn ?? true)
                {
                    fg.AppendLine($"MaxToSpawn => {MaxToSpawn}");
                }
                if (printMask?.BasePercent ?? true)
                {
                    fg.AppendLine($"BasePercent => {BasePercent}");
                }
                if (printMask?.FinalPercent ?? true)
                {
                    fg.AppendLine($"FinalPercent => {FinalPercent}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class CountSettings_ErrorMask : IErrorMask, IErrorMask<CountSettings_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Enabled;
        public Exception MaxToSpawn;
        public Exception BasePercent;
        public Exception FinalPercent;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            CountSettings_FieldIndex enu = (CountSettings_FieldIndex)index;
            switch (enu)
            {
                case CountSettings_FieldIndex.Enabled:
                    return Enabled;
                case CountSettings_FieldIndex.MaxToSpawn:
                    return MaxToSpawn;
                case CountSettings_FieldIndex.BasePercent:
                    return BasePercent;
                case CountSettings_FieldIndex.FinalPercent:
                    return FinalPercent;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            CountSettings_FieldIndex enu = (CountSettings_FieldIndex)index;
            switch (enu)
            {
                case CountSettings_FieldIndex.Enabled:
                    this.Enabled = ex;
                    break;
                case CountSettings_FieldIndex.MaxToSpawn:
                    this.MaxToSpawn = ex;
                    break;
                case CountSettings_FieldIndex.BasePercent:
                    this.BasePercent = ex;
                    break;
                case CountSettings_FieldIndex.FinalPercent:
                    this.FinalPercent = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            CountSettings_FieldIndex enu = (CountSettings_FieldIndex)index;
            switch (enu)
            {
                case CountSettings_FieldIndex.Enabled:
                    this.Enabled = (Exception)obj;
                    break;
                case CountSettings_FieldIndex.MaxToSpawn:
                    this.MaxToSpawn = (Exception)obj;
                    break;
                case CountSettings_FieldIndex.BasePercent:
                    this.BasePercent = (Exception)obj;
                    break;
                case CountSettings_FieldIndex.FinalPercent:
                    this.FinalPercent = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Enabled != null) return true;
            if (MaxToSpawn != null) return true;
            if (BasePercent != null) return true;
            if (FinalPercent != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("CountSettings_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Enabled => {Enabled}");
            fg.AppendLine($"MaxToSpawn => {MaxToSpawn}");
            fg.AppendLine($"BasePercent => {BasePercent}");
            fg.AppendLine($"FinalPercent => {FinalPercent}");
        }
        #endregion

        #region Combine
        public CountSettings_ErrorMask Combine(CountSettings_ErrorMask rhs)
        {
            var ret = new CountSettings_ErrorMask();
            ret.Enabled = this.Enabled.Combine(rhs.Enabled);
            ret.MaxToSpawn = this.MaxToSpawn.Combine(rhs.MaxToSpawn);
            ret.BasePercent = this.BasePercent.Combine(rhs.BasePercent);
            ret.FinalPercent = this.FinalPercent.Combine(rhs.FinalPercent);
            return ret;
        }
        public static CountSettings_ErrorMask Combine(CountSettings_ErrorMask lhs, CountSettings_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static CountSettings_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new CountSettings_ErrorMask();
        }
        #endregion

    }
    public class CountSettings_CopyMask
    {
        public CountSettings_CopyMask()
        {
        }

        public CountSettings_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Enabled = defaultOn;
            this.MaxToSpawn = defaultOn;
            this.BasePercent = defaultOn;
            this.FinalPercent = defaultOn;
        }

        #region Members
        public bool Enabled;
        public bool MaxToSpawn;
        public bool BasePercent;
        public bool FinalPercent;
        #endregion

    }

    public class CountSettings_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Enabled;
        public bool MaxToSpawn;
        public bool BasePercent;
        public bool FinalPercent;
        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Enabled, null));
            ret.Add((MaxToSpawn, null));
            ret.Add((BasePercent, null));
            ret.Add((FinalPercent, null));
        }
    }
    #endregion

    #endregion

}
