/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using DynamicLeveledLists.Internals;
using ReactiveUI;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace DynamicLeveledLists
{
    #region Class
    public partial class SpawningPerformance : 
        LoquiNotifyingObject,
        ISpawningPerformance,
        ILoquiObject<SpawningPerformance>,
        ILoquiObjectSetter,
        IEquatable<SpawningPerformance>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SpawningPerformance_Registration.Instance;
        public static SpawningPerformance_Registration Registration => SpawningPerformance_Registration.Instance;

        #region Ctor
        public SpawningPerformance()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Delay
        private Boolean _Delay;
        public Boolean Delay
        {
            get => this._Delay;
            set => this.RaiseAndSetIfChanged(ref this._Delay, value, nameof(Delay));
        }
        #endregion
        #region Confirm
        private Boolean _Confirm;
        public Boolean Confirm
        {
            get => this._Confirm;
            set => this.RaiseAndSetIfChanged(ref this._Confirm, value, nameof(Confirm));
        }
        #endregion
        #region Cleanup
        private Boolean _Cleanup;
        public Boolean Cleanup
        {
            get => this._Cleanup;
            set => this.RaiseAndSetIfChanged(ref this._Cleanup, value, nameof(Cleanup));
        }
        #endregion
        #region CleanupBatch
        private Int16 _CleanupBatch;
        public Int16 CleanupBatch
        {
            get => this._CleanupBatch;
            set => this.RaiseAndSetIfChanged(ref this._CleanupBatch, value, nameof(CleanupBatch));
        }
        #endregion

        IMask<bool> IEqualsMask<SpawningPerformance>.GetEqualsMask(SpawningPerformance rhs, EqualsMaskHelper.Include include) => SpawningPerformanceCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<ISpawningPerformanceGetter>.GetEqualsMask(ISpawningPerformanceGetter rhs, EqualsMaskHelper.Include include) => SpawningPerformanceCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public override string ToString()
        {
            return SpawningPerformanceCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            SpawningPerformance_Mask<bool> printMask = null)
        {
            return SpawningPerformanceCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            SpawningPerformanceCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public SpawningPerformance_Mask<bool> GetHasBeenSetMask()
        {
            return SpawningPerformanceCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is SpawningPerformance rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SpawningPerformance rhs)
        {
            if (rhs == null) return false;
            if (this.Delay != rhs.Delay) return false;
            if (this.Confirm != rhs.Confirm) return false;
            if (this.Cleanup != rhs.Cleanup) return false;
            if (this.CleanupBatch != rhs.CleanupBatch) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Delay).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Confirm).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Cleanup).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CleanupBatch).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static SpawningPerformance Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            SpawningPerformance_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SpawningPerformance Create_Xml(
            XElement node,
            out SpawningPerformance_ErrorMask errorMask,
            bool doMasks = true,
            SpawningPerformance_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = SpawningPerformance_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static SpawningPerformance Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new SpawningPerformance() : null;
                    break;
                default:
                    break;
            }
            var ret = new SpawningPerformance();
            try
            {
                foreach (var elem in node.Elements())
                {
                    SpawningPerformanceCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static SpawningPerformance Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            SpawningPerformance_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static SpawningPerformance Create_Xml(
            string path,
            out SpawningPerformance_ErrorMask errorMask,
            SpawningPerformance_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SpawningPerformance Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            SpawningPerformance_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SpawningPerformance Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            SpawningPerformance_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static SpawningPerformance Create_Xml(
            Stream stream,
            out SpawningPerformance_ErrorMask errorMask,
            SpawningPerformance_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SpawningPerformance Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            SpawningPerformance_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New)
        {
            CopyIn_Xml_Internal(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: null);
        }

        public virtual void CopyIn_Xml(
            XElement node,
            out SpawningPerformance_ErrorMask errorMask,
            SpawningPerformance_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SpawningPerformance_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            LoquiXmlTranslation<SpawningPerformance>.Instance.CopyIn(
                missing: missing,
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void CopyIn_Xml(
            string path,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyIn_Xml(
                missing: missing,
                node: node);
        }

        public void CopyIn_Xml(
            string path,
            out SpawningPerformance_ErrorMask errorMask,
            SpawningPerformance_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyIn_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                missing: missing,
                node: node);
        }

        public void CopyIn_Xml(
            Stream stream,
            out SpawningPerformance_ErrorMask errorMask,
            SpawningPerformance_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out SpawningPerformance_ErrorMask errorMask,
            bool doMasks = true,
            SpawningPerformance_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SpawningPerformance_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out SpawningPerformance_ErrorMask errorMask,
            SpawningPerformance_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out SpawningPerformance_ErrorMask errorMask,
            SpawningPerformance_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            SpawningPerformance_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            SpawningPerformanceCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((SpawningPerformance_FieldIndex)index)
            {
                case SpawningPerformance_FieldIndex.Delay:
                case SpawningPerformance_FieldIndex.Confirm:
                case SpawningPerformance_FieldIndex.Cleanup:
                case SpawningPerformance_FieldIndex.CleanupBatch:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        public SpawningPerformance Copy(
            SpawningPerformance_CopyMask copyMask = null,
            ISpawningPerformanceGetter def = null)
        {
            return SpawningPerformance.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static SpawningPerformance Copy(
            ISpawningPerformance item,
            SpawningPerformance_CopyMask copyMask = null,
            ISpawningPerformanceGetter def = null)
        {
            SpawningPerformance ret;
            if (item.GetType().Equals(typeof(SpawningPerformance)))
            {
                ret = new SpawningPerformance();
            }
            else
            {
                ret = (SpawningPerformance)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static SpawningPerformance Copy_ToLoqui(
            ISpawningPerformanceGetter item,
            SpawningPerformance_CopyMask copyMask = null,
            ISpawningPerformanceGetter def = null)
        {
            SpawningPerformance ret;
            if (item.GetType().Equals(typeof(SpawningPerformance)))
            {
                ret = new SpawningPerformance() as SpawningPerformance;
            }
            else
            {
                ret = (SpawningPerformance)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(ISpawningPerformanceGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (ISpawningPerformanceGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            ISpawningPerformanceGetter rhs,
            SpawningPerformance_CopyMask copyMask,
            ISpawningPerformanceGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            ISpawningPerformanceGetter rhs,
            out SpawningPerformance_ErrorMask errorMask,
            SpawningPerformance_CopyMask copyMask = null,
            ISpawningPerformanceGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SpawningPerformanceCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = SpawningPerformance_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ISpawningPerformanceGetter rhs,
            ErrorMaskBuilder errorMask,
            SpawningPerformance_CopyMask copyMask = null,
            ISpawningPerformanceGetter def = null,
            bool doMasks = true)
        {
            SpawningPerformanceCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            SpawningPerformance_FieldIndex enu = (SpawningPerformance_FieldIndex)index;
            switch (enu)
            {
                case SpawningPerformance_FieldIndex.Delay:
                    this.Delay = (Boolean)obj;
                    break;
                case SpawningPerformance_FieldIndex.Confirm:
                    this.Confirm = (Boolean)obj;
                    break;
                case SpawningPerformance_FieldIndex.Cleanup:
                    this.Cleanup = (Boolean)obj;
                    break;
                case SpawningPerformance_FieldIndex.CleanupBatch:
                    this.CleanupBatch = (Int16)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial();

        protected void CallClearPartial_Internal()
        {
            ClearPartial();
        }

        public void Clear()
        {
            CallClearPartial_Internal();
            SpawningPerformanceCommon.Clear(this);
        }


        public static SpawningPerformance Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new SpawningPerformance();
            foreach (var pair in fields)
            {
                CopyInInternal_SpawningPerformance(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_SpawningPerformance(SpawningPerformance obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out SpawningPerformance_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case SpawningPerformance_FieldIndex.Delay:
                    obj.Delay = (Boolean)pair.Value;
                    break;
                case SpawningPerformance_FieldIndex.Confirm:
                    obj.Confirm = (Boolean)pair.Value;
                    break;
                case SpawningPerformance_FieldIndex.Cleanup:
                    obj.Cleanup = (Boolean)pair.Value;
                    break;
                case SpawningPerformance_FieldIndex.CleanupBatch:
                    obj.CleanupBatch = (Int16)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ISpawningPerformance : ISpawningPerformanceGetter, ILoquiClass<ISpawningPerformance, ISpawningPerformanceGetter>, ILoquiClass<SpawningPerformance, ISpawningPerformanceGetter>
    {
        new Boolean Delay { get; set; }

        new Boolean Confirm { get; set; }

        new Boolean Cleanup { get; set; }

        new Int16 CleanupBatch { get; set; }

    }

    public partial interface ISpawningPerformanceGetter : ILoquiObject
    {
        #region Delay
        Boolean Delay { get; }

        #endregion
        #region Confirm
        Boolean Confirm { get; }

        #endregion
        #region Cleanup
        Boolean Cleanup { get; }

        #endregion
        #region CleanupBatch
        Int16 CleanupBatch { get; }

        #endregion

    }

    #endregion

}

namespace DynamicLeveledLists.Internals
{
    #region Field Index
    public enum SpawningPerformance_FieldIndex
    {
        Delay = 0,
        Confirm = 1,
        Cleanup = 2,
        CleanupBatch = 3,
    }
    #endregion

    #region Registration
    public class SpawningPerformance_Registration : ILoquiRegistration
    {
        public static readonly SpawningPerformance_Registration Instance = new SpawningPerformance_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_DynamicLeveledLists.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_DynamicLeveledLists.ProtocolKey,
            msgID: 5,
            version: 0);

        public const string GUID = "fbebf620-18df-4b6f-954b-346bc2d4e111";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(SpawningPerformance_Mask<>);

        public static readonly Type ErrorMaskType = typeof(SpawningPerformance_ErrorMask);

        public static readonly Type ClassType = typeof(SpawningPerformance);

        public static readonly Type GetterType = typeof(ISpawningPerformanceGetter);

        public static readonly Type SetterType = typeof(ISpawningPerformance);

        public static readonly Type CommonType = typeof(SpawningPerformanceCommon);

        public const string FullName = "DynamicLeveledLists.SpawningPerformance";

        public const string Name = "SpawningPerformance";

        public const string Namespace = "DynamicLeveledLists";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DELAY":
                    return (ushort)SpawningPerformance_FieldIndex.Delay;
                case "CONFIRM":
                    return (ushort)SpawningPerformance_FieldIndex.Confirm;
                case "CLEANUP":
                    return (ushort)SpawningPerformance_FieldIndex.Cleanup;
                case "CLEANUPBATCH":
                    return (ushort)SpawningPerformance_FieldIndex.CleanupBatch;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SpawningPerformance_FieldIndex enu = (SpawningPerformance_FieldIndex)index;
            switch (enu)
            {
                case SpawningPerformance_FieldIndex.Delay:
                case SpawningPerformance_FieldIndex.Confirm:
                case SpawningPerformance_FieldIndex.Cleanup:
                case SpawningPerformance_FieldIndex.CleanupBatch:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SpawningPerformance_FieldIndex enu = (SpawningPerformance_FieldIndex)index;
            switch (enu)
            {
                case SpawningPerformance_FieldIndex.Delay:
                case SpawningPerformance_FieldIndex.Confirm:
                case SpawningPerformance_FieldIndex.Cleanup:
                case SpawningPerformance_FieldIndex.CleanupBatch:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SpawningPerformance_FieldIndex enu = (SpawningPerformance_FieldIndex)index;
            switch (enu)
            {
                case SpawningPerformance_FieldIndex.Delay:
                case SpawningPerformance_FieldIndex.Confirm:
                case SpawningPerformance_FieldIndex.Cleanup:
                case SpawningPerformance_FieldIndex.CleanupBatch:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            SpawningPerformance_FieldIndex enu = (SpawningPerformance_FieldIndex)index;
            switch (enu)
            {
                case SpawningPerformance_FieldIndex.Delay:
                    return "Delay";
                case SpawningPerformance_FieldIndex.Confirm:
                    return "Confirm";
                case SpawningPerformance_FieldIndex.Cleanup:
                    return "Cleanup";
                case SpawningPerformance_FieldIndex.CleanupBatch:
                    return "CleanupBatch";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SpawningPerformance_FieldIndex enu = (SpawningPerformance_FieldIndex)index;
            switch (enu)
            {
                case SpawningPerformance_FieldIndex.Delay:
                case SpawningPerformance_FieldIndex.Confirm:
                case SpawningPerformance_FieldIndex.Cleanup:
                case SpawningPerformance_FieldIndex.CleanupBatch:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            SpawningPerformance_FieldIndex enu = (SpawningPerformance_FieldIndex)index;
            switch (enu)
            {
                case SpawningPerformance_FieldIndex.Delay:
                case SpawningPerformance_FieldIndex.Confirm:
                case SpawningPerformance_FieldIndex.Cleanup:
                case SpawningPerformance_FieldIndex.CleanupBatch:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            SpawningPerformance_FieldIndex enu = (SpawningPerformance_FieldIndex)index;
            switch (enu)
            {
                case SpawningPerformance_FieldIndex.Delay:
                    return typeof(Boolean);
                case SpawningPerformance_FieldIndex.Confirm:
                    return typeof(Boolean);
                case SpawningPerformance_FieldIndex.Cleanup:
                    return typeof(Boolean);
                case SpawningPerformance_FieldIndex.CleanupBatch:
                    return typeof(Int16);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class SpawningPerformanceCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ISpawningPerformance item,
            ISpawningPerformanceGetter rhs,
            ISpawningPerformanceGetter def,
            ErrorMaskBuilder errorMask,
            SpawningPerformance_CopyMask copyMask)
        {
            if (copyMask?.Delay ?? true)
            {
                errorMask?.PushIndex((int)SpawningPerformance_FieldIndex.Delay);
                try
                {
                    item.Delay = rhs.Delay;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Confirm ?? true)
            {
                errorMask?.PushIndex((int)SpawningPerformance_FieldIndex.Confirm);
                try
                {
                    item.Confirm = rhs.Confirm;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Cleanup ?? true)
            {
                errorMask?.PushIndex((int)SpawningPerformance_FieldIndex.Cleanup);
                try
                {
                    item.Cleanup = rhs.Cleanup;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.CleanupBatch ?? true)
            {
                errorMask?.PushIndex((int)SpawningPerformance_FieldIndex.CleanupBatch);
                try
                {
                    item.CleanupBatch = rhs.CleanupBatch;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(ISpawningPerformance item)
        {
            item.Delay = default(Boolean);
            item.Confirm = default(Boolean);
            item.Cleanup = default(Boolean);
            item.CleanupBatch = default(Int16);
        }

        public static SpawningPerformance_Mask<bool> GetEqualsMask(
            this ISpawningPerformanceGetter item,
            ISpawningPerformanceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SpawningPerformance_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            ISpawningPerformanceGetter item,
            ISpawningPerformanceGetter rhs,
            SpawningPerformance_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Delay = item.Delay == rhs.Delay;
            ret.Confirm = item.Confirm == rhs.Confirm;
            ret.Cleanup = item.Cleanup == rhs.Cleanup;
            ret.CleanupBatch = item.CleanupBatch == rhs.CleanupBatch;
        }

        public static string ToString(
            this ISpawningPerformanceGetter item,
            string name = null,
            SpawningPerformance_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ISpawningPerformanceGetter item,
            FileGeneration fg,
            string name = null,
            SpawningPerformance_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(SpawningPerformance)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(SpawningPerformance)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Delay ?? true)
                {
                    fg.AppendLine($"Delay => {item.Delay}");
                }
                if (printMask?.Confirm ?? true)
                {
                    fg.AppendLine($"Confirm => {item.Confirm}");
                }
                if (printMask?.Cleanup ?? true)
                {
                    fg.AppendLine($"Cleanup => {item.Cleanup}");
                }
                if (printMask?.CleanupBatch ?? true)
                {
                    fg.AppendLine($"CleanupBatch => {item.CleanupBatch}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ISpawningPerformanceGetter item,
            SpawningPerformance_Mask<bool?> checkMask)
        {
            return true;
        }

        public static SpawningPerformance_Mask<bool> GetHasBeenSetMask(ISpawningPerformanceGetter item)
        {
            var ret = new SpawningPerformance_Mask<bool>();
            ret.Delay = true;
            ret.Confirm = true;
            ret.Cleanup = true;
            ret.CleanupBatch = true;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            SpawningPerformance item,
            bool doMasks,
            out SpawningPerformance_ErrorMask errorMask,
            SpawningPerformance_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SpawningPerformance_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            SpawningPerformance item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "DynamicLeveledLists.SpawningPerformance");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "DynamicLeveledLists.SpawningPerformance");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this SpawningPerformance item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)SpawningPerformance_FieldIndex.Delay) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Delay),
                    item: item.Delay,
                    fieldIndex: (int)SpawningPerformance_FieldIndex.Delay,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SpawningPerformance_FieldIndex.Confirm) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Confirm),
                    item: item.Confirm,
                    fieldIndex: (int)SpawningPerformance_FieldIndex.Confirm,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SpawningPerformance_FieldIndex.Cleanup) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Cleanup),
                    item: item.Cleanup,
                    fieldIndex: (int)SpawningPerformance_FieldIndex.Cleanup,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SpawningPerformance_FieldIndex.CleanupBatch) ?? true))
            {
                Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CleanupBatch),
                    item: item.CleanupBatch,
                    fieldIndex: (int)SpawningPerformance_FieldIndex.CleanupBatch,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            this SpawningPerformance item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SpawningPerformanceCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this SpawningPerformance item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Delay":
                    if ((translationMask?.GetShouldTranslate((int)SpawningPerformance_FieldIndex.Delay) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)SpawningPerformance_FieldIndex.Delay);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean DelayParse,
                                errorMask: errorMask))
                            {
                                item.Delay = DelayParse;
                            }
                            else
                            {
                                item.Delay = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "Confirm":
                    if ((translationMask?.GetShouldTranslate((int)SpawningPerformance_FieldIndex.Confirm) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)SpawningPerformance_FieldIndex.Confirm);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean ConfirmParse,
                                errorMask: errorMask))
                            {
                                item.Confirm = ConfirmParse;
                            }
                            else
                            {
                                item.Confirm = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "Cleanup":
                    if ((translationMask?.GetShouldTranslate((int)SpawningPerformance_FieldIndex.Cleanup) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)SpawningPerformance_FieldIndex.Cleanup);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean CleanupParse,
                                errorMask: errorMask))
                            {
                                item.Cleanup = CleanupParse;
                            }
                            else
                            {
                                item.Cleanup = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "CleanupBatch":
                    if ((translationMask?.GetShouldTranslate((int)SpawningPerformance_FieldIndex.CleanupBatch) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)SpawningPerformance_FieldIndex.CleanupBatch);
                            if (Int16XmlTranslation.Instance.Parse(
                                node: node,
                                item: out Int16 CleanupBatchParse,
                                errorMask: errorMask))
                            {
                                item.CleanupBatch = CleanupBatchParse;
                            }
                            else
                            {
                                item.CleanupBatch = default(Int16);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class SpawningPerformance_Mask<T> : IMask<T>, IEquatable<SpawningPerformance_Mask<T>>
    {
        #region Ctors
        public SpawningPerformance_Mask()
        {
        }

        public SpawningPerformance_Mask(T initialValue)
        {
            this.Delay = initialValue;
            this.Confirm = initialValue;
            this.Cleanup = initialValue;
            this.CleanupBatch = initialValue;
        }
        #endregion

        #region Members
        public T Delay;
        public T Confirm;
        public T Cleanup;
        public T CleanupBatch;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is SpawningPerformance_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SpawningPerformance_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Delay, rhs.Delay)) return false;
            if (!object.Equals(this.Confirm, rhs.Confirm)) return false;
            if (!object.Equals(this.Cleanup, rhs.Cleanup)) return false;
            if (!object.Equals(this.CleanupBatch, rhs.CleanupBatch)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Delay?.GetHashCode());
            ret = ret.CombineHashCode(this.Confirm?.GetHashCode());
            ret = ret.CombineHashCode(this.Cleanup?.GetHashCode());
            ret = ret.CombineHashCode(this.CleanupBatch?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Delay)) return false;
            if (!eval(this.Confirm)) return false;
            if (!eval(this.Cleanup)) return false;
            if (!eval(this.CleanupBatch)) return false;
            return true;
        }
        #endregion

        #region Translate
        public SpawningPerformance_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new SpawningPerformance_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(SpawningPerformance_Mask<R> obj, Func<T, R> eval)
        {
            obj.Delay = eval(this.Delay);
            obj.Confirm = eval(this.Confirm);
            obj.Cleanup = eval(this.Cleanup);
            obj.CleanupBatch = eval(this.CleanupBatch);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(SpawningPerformance_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, SpawningPerformance_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(SpawningPerformance_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Delay ?? true)
                {
                    fg.AppendLine($"Delay => {Delay}");
                }
                if (printMask?.Confirm ?? true)
                {
                    fg.AppendLine($"Confirm => {Confirm}");
                }
                if (printMask?.Cleanup ?? true)
                {
                    fg.AppendLine($"Cleanup => {Cleanup}");
                }
                if (printMask?.CleanupBatch ?? true)
                {
                    fg.AppendLine($"CleanupBatch => {CleanupBatch}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class SpawningPerformance_ErrorMask : IErrorMask, IErrorMask<SpawningPerformance_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Delay;
        public Exception Confirm;
        public Exception Cleanup;
        public Exception CleanupBatch;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            SpawningPerformance_FieldIndex enu = (SpawningPerformance_FieldIndex)index;
            switch (enu)
            {
                case SpawningPerformance_FieldIndex.Delay:
                    return Delay;
                case SpawningPerformance_FieldIndex.Confirm:
                    return Confirm;
                case SpawningPerformance_FieldIndex.Cleanup:
                    return Cleanup;
                case SpawningPerformance_FieldIndex.CleanupBatch:
                    return CleanupBatch;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            SpawningPerformance_FieldIndex enu = (SpawningPerformance_FieldIndex)index;
            switch (enu)
            {
                case SpawningPerformance_FieldIndex.Delay:
                    this.Delay = ex;
                    break;
                case SpawningPerformance_FieldIndex.Confirm:
                    this.Confirm = ex;
                    break;
                case SpawningPerformance_FieldIndex.Cleanup:
                    this.Cleanup = ex;
                    break;
                case SpawningPerformance_FieldIndex.CleanupBatch:
                    this.CleanupBatch = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            SpawningPerformance_FieldIndex enu = (SpawningPerformance_FieldIndex)index;
            switch (enu)
            {
                case SpawningPerformance_FieldIndex.Delay:
                    this.Delay = (Exception)obj;
                    break;
                case SpawningPerformance_FieldIndex.Confirm:
                    this.Confirm = (Exception)obj;
                    break;
                case SpawningPerformance_FieldIndex.Cleanup:
                    this.Cleanup = (Exception)obj;
                    break;
                case SpawningPerformance_FieldIndex.CleanupBatch:
                    this.CleanupBatch = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Delay != null) return true;
            if (Confirm != null) return true;
            if (Cleanup != null) return true;
            if (CleanupBatch != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("SpawningPerformance_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Delay => {Delay}");
            fg.AppendLine($"Confirm => {Confirm}");
            fg.AppendLine($"Cleanup => {Cleanup}");
            fg.AppendLine($"CleanupBatch => {CleanupBatch}");
        }
        #endregion

        #region Combine
        public SpawningPerformance_ErrorMask Combine(SpawningPerformance_ErrorMask rhs)
        {
            var ret = new SpawningPerformance_ErrorMask();
            ret.Delay = this.Delay.Combine(rhs.Delay);
            ret.Confirm = this.Confirm.Combine(rhs.Confirm);
            ret.Cleanup = this.Cleanup.Combine(rhs.Cleanup);
            ret.CleanupBatch = this.CleanupBatch.Combine(rhs.CleanupBatch);
            return ret;
        }
        public static SpawningPerformance_ErrorMask Combine(SpawningPerformance_ErrorMask lhs, SpawningPerformance_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static SpawningPerformance_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new SpawningPerformance_ErrorMask();
        }
        #endregion

    }
    public class SpawningPerformance_CopyMask
    {
        public SpawningPerformance_CopyMask()
        {
        }

        public SpawningPerformance_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Delay = defaultOn;
            this.Confirm = defaultOn;
            this.Cleanup = defaultOn;
            this.CleanupBatch = defaultOn;
        }

        #region Members
        public bool Delay;
        public bool Confirm;
        public bool Cleanup;
        public bool CleanupBatch;
        #endregion

    }

    public class SpawningPerformance_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Delay;
        public bool Confirm;
        public bool Cleanup;
        public bool CleanupBatch;
        #endregion

        #region Ctors
        public SpawningPerformance_TranslationMask()
        {
        }

        public SpawningPerformance_TranslationMask(bool defaultOn)
        {
            this.Delay = defaultOn;
            this.Confirm = defaultOn;
            this.Cleanup = defaultOn;
            this.CleanupBatch = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Delay, null));
            ret.Add((Confirm, null));
            ret.Add((Cleanup, null));
            ret.Add((CleanupBatch, null));
        }
    }
    #endregion

    #endregion

}
