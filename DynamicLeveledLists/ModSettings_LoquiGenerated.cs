/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using DynamicLeveledLists.Internals;
using ReactiveUI;
using DynamicLeveledLists;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace DynamicLeveledLists
{
    #region Class
    public partial class ModSettings : 
        LoquiNotifyingObject,
        IModSettings,
        ILoquiObject<ModSettings>,
        ILoquiObjectSetter,
        IEquatable<ModSettings>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ModSettings_Registration.Instance;
        public static ModSettings_Registration Registration => ModSettings_Registration.Instance;

        #region Ctor
        public ModSettings()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Enabled
        private Boolean _Enabled;
        public Boolean Enabled
        {
            get => this._Enabled;
            set => this.RaiseAndSetIfChanged(ref this._Enabled, value, nameof(Enabled));
        }
        #endregion
        #region LowTierReductionLine
        private Byte _LowTierReductionLine;
        public Byte LowTierReductionLine
        {
            get => this._LowTierReductionLine;
            set => this.RaiseAndSetIfChanged(ref this._LowTierReductionLine, value, nameof(LowTierReductionLine));
        }
        #endregion
        #region LowTierCutLine
        private Byte _LowTierCutLine;
        public Byte LowTierCutLine
        {
            get => this._LowTierCutLine;
            set => this.RaiseAndSetIfChanged(ref this._LowTierCutLine, value, nameof(LowTierCutLine));
        }
        #endregion
        #region HighTierReductionLine
        private Byte _HighTierReductionLine;
        public Byte HighTierReductionLine
        {
            get => this._HighTierReductionLine;
            set => this.RaiseAndSetIfChanged(ref this._HighTierReductionLine, value, nameof(HighTierReductionLine));
        }
        #endregion
        #region HighTierCutLine
        private Byte _HighTierCutLine;
        public Byte HighTierCutLine
        {
            get => this._HighTierCutLine;
            set => this.RaiseAndSetIfChanged(ref this._HighTierCutLine, value, nameof(HighTierCutLine));
        }
        #endregion
        #region EpicSpawnsEnabled
        private Boolean _EpicSpawnsEnabled;
        public Boolean EpicSpawnsEnabled
        {
            get => this._EpicSpawnsEnabled;
            set => this.RaiseAndSetIfChanged(ref this._EpicSpawnsEnabled, value, nameof(EpicSpawnsEnabled));
        }
        #endregion
        #region EpicTierSoftCutLine
        private Byte _EpicTierSoftCutLine;
        public Byte EpicTierSoftCutLine
        {
            get => this._EpicTierSoftCutLine;
            set => this.RaiseAndSetIfChanged(ref this._EpicTierSoftCutLine, value, nameof(EpicTierSoftCutLine));
        }
        #endregion
        #region EpicTierCutLine
        private Byte _EpicTierCutLine;
        public Byte EpicTierCutLine
        {
            get => this._EpicTierCutLine;
            set => this.RaiseAndSetIfChanged(ref this._EpicTierCutLine, value, nameof(EpicTierCutLine));
        }
        #endregion
        #region EpicTierPercentChance
        private Percent _EpicTierPercentChance;
        public Percent EpicTierPercentChance
        {
            get => this._EpicTierPercentChance;
            set => this.RaiseAndSetIfChanged(ref this._EpicTierPercentChance, value, nameof(EpicTierPercentChance));
        }
        #endregion
        #region ForceTrueLevels
        private Boolean _ForceTrueLevels;
        public Boolean ForceTrueLevels
        {
            get => this._ForceTrueLevels;
            set => this.RaiseAndSetIfChanged(ref this._ForceTrueLevels, value, nameof(ForceTrueLevels));
        }
        #endregion
        #region ReviveDeadLLists
        private Boolean _ReviveDeadLLists;
        public Boolean ReviveDeadLLists
        {
            get => this._ReviveDeadLLists;
            set => this.RaiseAndSetIfChanged(ref this._ReviveDeadLLists, value, nameof(ReviveDeadLLists));
        }
        #endregion
        #region Debug
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DebugSettings _Debug = new DebugSettings();
        public DebugSettings Debug
        {
            get => _Debug;
            set => _Debug = value ?? new DebugSettings();
        }
        #endregion
        #region Count
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CountSettings _Count = new CountSettings();
        public CountSettings Count
        {
            get => _Count;
            set => _Count = value ?? new CountSettings();
        }
        #endregion
        #region Performance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SpawningPerformance _Performance = new SpawningPerformance();
        public SpawningPerformance Performance
        {
            get => _Performance;
            set => _Performance = value ?? new SpawningPerformance();
        }
        #endregion

        IMask<bool> IEqualsMask<ModSettings>.GetEqualsMask(ModSettings rhs, EqualsMaskHelper.Include include) => ModSettingsCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IModSettingsGetter>.GetEqualsMask(IModSettingsGetter rhs, EqualsMaskHelper.Include include) => ModSettingsCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public override string ToString()
        {
            return ModSettingsCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            ModSettings_Mask<bool> printMask = null)
        {
            return ModSettingsCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ModSettingsCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public ModSettings_Mask<bool> GetHasBeenSetMask()
        {
            return ModSettingsCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ModSettings rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ModSettings rhs)
        {
            if (rhs == null) return false;
            if (this.Enabled != rhs.Enabled) return false;
            if (this.LowTierReductionLine != rhs.LowTierReductionLine) return false;
            if (this.LowTierCutLine != rhs.LowTierCutLine) return false;
            if (this.HighTierReductionLine != rhs.HighTierReductionLine) return false;
            if (this.HighTierCutLine != rhs.HighTierCutLine) return false;
            if (this.EpicSpawnsEnabled != rhs.EpicSpawnsEnabled) return false;
            if (this.EpicTierSoftCutLine != rhs.EpicTierSoftCutLine) return false;
            if (this.EpicTierCutLine != rhs.EpicTierCutLine) return false;
            if (!this.EpicTierPercentChance.Equals(rhs.EpicTierPercentChance)) return false;
            if (this.ForceTrueLevels != rhs.ForceTrueLevels) return false;
            if (this.ReviveDeadLLists != rhs.ReviveDeadLLists) return false;
            if (!object.Equals(this.Debug, rhs.Debug)) return false;
            if (!object.Equals(this.Count, rhs.Count)) return false;
            if (!object.Equals(this.Performance, rhs.Performance)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Enabled).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LowTierReductionLine).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LowTierCutLine).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HighTierReductionLine).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(HighTierCutLine).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EpicSpawnsEnabled).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EpicTierSoftCutLine).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EpicTierCutLine).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EpicTierPercentChance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ForceTrueLevels).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ReviveDeadLLists).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Debug).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Count).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Performance).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static ModSettings Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            ModSettings_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ModSettings Create_Xml(
            XElement node,
            out ModSettings_ErrorMask errorMask,
            bool doMasks = true,
            ModSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ModSettings_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ModSettings Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new ModSettings() : null;
                    break;
                default:
                    break;
            }
            var ret = new ModSettings();
            try
            {
                foreach (var elem in node.Elements())
                {
                    ModSettingsCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static ModSettings Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            ModSettings_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ModSettings Create_Xml(
            string path,
            out ModSettings_ErrorMask errorMask,
            ModSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ModSettings Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            ModSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ModSettings Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            ModSettings_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ModSettings Create_Xml(
            Stream stream,
            out ModSettings_ErrorMask errorMask,
            ModSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ModSettings Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            ModSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New)
        {
            CopyIn_Xml_Internal(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: null);
        }

        public virtual void CopyIn_Xml(
            XElement node,
            out ModSettings_ErrorMask errorMask,
            ModSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ModSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            LoquiXmlTranslation<ModSettings>.Instance.CopyIn(
                missing: missing,
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void CopyIn_Xml(
            string path,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyIn_Xml(
                missing: missing,
                node: node);
        }

        public void CopyIn_Xml(
            string path,
            out ModSettings_ErrorMask errorMask,
            ModSettings_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyIn_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                missing: missing,
                node: node);
        }

        public void CopyIn_Xml(
            Stream stream,
            out ModSettings_ErrorMask errorMask,
            ModSettings_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out ModSettings_ErrorMask errorMask,
            bool doMasks = true,
            ModSettings_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ModSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out ModSettings_ErrorMask errorMask,
            ModSettings_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out ModSettings_ErrorMask errorMask,
            ModSettings_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            ModSettings_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ModSettingsCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((ModSettings_FieldIndex)index)
            {
                case ModSettings_FieldIndex.Enabled:
                case ModSettings_FieldIndex.LowTierReductionLine:
                case ModSettings_FieldIndex.LowTierCutLine:
                case ModSettings_FieldIndex.HighTierReductionLine:
                case ModSettings_FieldIndex.HighTierCutLine:
                case ModSettings_FieldIndex.EpicSpawnsEnabled:
                case ModSettings_FieldIndex.EpicTierSoftCutLine:
                case ModSettings_FieldIndex.EpicTierCutLine:
                case ModSettings_FieldIndex.EpicTierPercentChance:
                case ModSettings_FieldIndex.ForceTrueLevels:
                case ModSettings_FieldIndex.ReviveDeadLLists:
                case ModSettings_FieldIndex.Debug:
                case ModSettings_FieldIndex.Count:
                case ModSettings_FieldIndex.Performance:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        public ModSettings Copy(
            ModSettings_CopyMask copyMask = null,
            IModSettingsGetter def = null)
        {
            return ModSettings.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static ModSettings Copy(
            IModSettings item,
            ModSettings_CopyMask copyMask = null,
            IModSettingsGetter def = null)
        {
            ModSettings ret;
            if (item.GetType().Equals(typeof(ModSettings)))
            {
                ret = new ModSettings();
            }
            else
            {
                ret = (ModSettings)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static ModSettings Copy_ToLoqui(
            IModSettingsGetter item,
            ModSettings_CopyMask copyMask = null,
            IModSettingsGetter def = null)
        {
            ModSettings ret;
            if (item.GetType().Equals(typeof(ModSettings)))
            {
                ret = new ModSettings() as ModSettings;
            }
            else
            {
                ret = (ModSettings)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(IModSettingsGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (IModSettingsGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            IModSettingsGetter rhs,
            ModSettings_CopyMask copyMask,
            IModSettingsGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            IModSettingsGetter rhs,
            out ModSettings_ErrorMask errorMask,
            ModSettings_CopyMask copyMask = null,
            IModSettingsGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ModSettingsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = ModSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IModSettingsGetter rhs,
            ErrorMaskBuilder errorMask,
            ModSettings_CopyMask copyMask = null,
            IModSettingsGetter def = null,
            bool doMasks = true)
        {
            ModSettingsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            ModSettings_FieldIndex enu = (ModSettings_FieldIndex)index;
            switch (enu)
            {
                case ModSettings_FieldIndex.Enabled:
                    this.Enabled = (Boolean)obj;
                    break;
                case ModSettings_FieldIndex.LowTierReductionLine:
                    this.LowTierReductionLine = (Byte)obj;
                    break;
                case ModSettings_FieldIndex.LowTierCutLine:
                    this.LowTierCutLine = (Byte)obj;
                    break;
                case ModSettings_FieldIndex.HighTierReductionLine:
                    this.HighTierReductionLine = (Byte)obj;
                    break;
                case ModSettings_FieldIndex.HighTierCutLine:
                    this.HighTierCutLine = (Byte)obj;
                    break;
                case ModSettings_FieldIndex.EpicSpawnsEnabled:
                    this.EpicSpawnsEnabled = (Boolean)obj;
                    break;
                case ModSettings_FieldIndex.EpicTierSoftCutLine:
                    this.EpicTierSoftCutLine = (Byte)obj;
                    break;
                case ModSettings_FieldIndex.EpicTierCutLine:
                    this.EpicTierCutLine = (Byte)obj;
                    break;
                case ModSettings_FieldIndex.EpicTierPercentChance:
                    this.EpicTierPercentChance = (Percent)obj;
                    break;
                case ModSettings_FieldIndex.ForceTrueLevels:
                    this.ForceTrueLevels = (Boolean)obj;
                    break;
                case ModSettings_FieldIndex.ReviveDeadLLists:
                    this.ReviveDeadLLists = (Boolean)obj;
                    break;
                case ModSettings_FieldIndex.Debug:
                    this.Debug = (DebugSettings)obj;
                    break;
                case ModSettings_FieldIndex.Count:
                    this.Count = (CountSettings)obj;
                    break;
                case ModSettings_FieldIndex.Performance:
                    this.Performance = (SpawningPerformance)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial();

        protected void CallClearPartial_Internal()
        {
            ClearPartial();
        }

        public void Clear()
        {
            CallClearPartial_Internal();
            ModSettingsCommon.Clear(this);
        }


        public static ModSettings Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new ModSettings();
            foreach (var pair in fields)
            {
                CopyInInternal_ModSettings(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_ModSettings(ModSettings obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out ModSettings_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case ModSettings_FieldIndex.Enabled:
                    obj.Enabled = (Boolean)pair.Value;
                    break;
                case ModSettings_FieldIndex.LowTierReductionLine:
                    obj.LowTierReductionLine = (Byte)pair.Value;
                    break;
                case ModSettings_FieldIndex.LowTierCutLine:
                    obj.LowTierCutLine = (Byte)pair.Value;
                    break;
                case ModSettings_FieldIndex.HighTierReductionLine:
                    obj.HighTierReductionLine = (Byte)pair.Value;
                    break;
                case ModSettings_FieldIndex.HighTierCutLine:
                    obj.HighTierCutLine = (Byte)pair.Value;
                    break;
                case ModSettings_FieldIndex.EpicSpawnsEnabled:
                    obj.EpicSpawnsEnabled = (Boolean)pair.Value;
                    break;
                case ModSettings_FieldIndex.EpicTierSoftCutLine:
                    obj.EpicTierSoftCutLine = (Byte)pair.Value;
                    break;
                case ModSettings_FieldIndex.EpicTierCutLine:
                    obj.EpicTierCutLine = (Byte)pair.Value;
                    break;
                case ModSettings_FieldIndex.EpicTierPercentChance:
                    obj.EpicTierPercentChance = (Percent)pair.Value;
                    break;
                case ModSettings_FieldIndex.ForceTrueLevels:
                    obj.ForceTrueLevels = (Boolean)pair.Value;
                    break;
                case ModSettings_FieldIndex.ReviveDeadLLists:
                    obj.ReviveDeadLLists = (Boolean)pair.Value;
                    break;
                case ModSettings_FieldIndex.Debug:
                    obj.Debug = (DebugSettings)pair.Value;
                    break;
                case ModSettings_FieldIndex.Count:
                    obj.Count = (CountSettings)pair.Value;
                    break;
                case ModSettings_FieldIndex.Performance:
                    obj.Performance = (SpawningPerformance)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IModSettings : IModSettingsGetter, ILoquiClass<IModSettings, IModSettingsGetter>, ILoquiClass<ModSettings, IModSettingsGetter>
    {
        new Boolean Enabled { get; set; }

        new Byte LowTierReductionLine { get; set; }

        new Byte LowTierCutLine { get; set; }

        new Byte HighTierReductionLine { get; set; }

        new Byte HighTierCutLine { get; set; }

        new Boolean EpicSpawnsEnabled { get; set; }

        new Byte EpicTierSoftCutLine { get; set; }

        new Byte EpicTierCutLine { get; set; }

        new Percent EpicTierPercentChance { get; set; }

        new Boolean ForceTrueLevels { get; set; }

        new Boolean ReviveDeadLLists { get; set; }

        new DebugSettings Debug { get; set; }

        new CountSettings Count { get; set; }

        new SpawningPerformance Performance { get; set; }

    }

    public partial interface IModSettingsGetter : ILoquiObject
    {
        #region Enabled
        Boolean Enabled { get; }

        #endregion
        #region LowTierReductionLine
        Byte LowTierReductionLine { get; }

        #endregion
        #region LowTierCutLine
        Byte LowTierCutLine { get; }

        #endregion
        #region HighTierReductionLine
        Byte HighTierReductionLine { get; }

        #endregion
        #region HighTierCutLine
        Byte HighTierCutLine { get; }

        #endregion
        #region EpicSpawnsEnabled
        Boolean EpicSpawnsEnabled { get; }

        #endregion
        #region EpicTierSoftCutLine
        Byte EpicTierSoftCutLine { get; }

        #endregion
        #region EpicTierCutLine
        Byte EpicTierCutLine { get; }

        #endregion
        #region EpicTierPercentChance
        Percent EpicTierPercentChance { get; }

        #endregion
        #region ForceTrueLevels
        Boolean ForceTrueLevels { get; }

        #endregion
        #region ReviveDeadLLists
        Boolean ReviveDeadLLists { get; }

        #endregion
        #region Debug
        DebugSettings Debug { get; }

        #endregion
        #region Count
        CountSettings Count { get; }

        #endregion
        #region Performance
        SpawningPerformance Performance { get; }

        #endregion

    }

    #endregion

}

namespace DynamicLeveledLists.Internals
{
    #region Field Index
    public enum ModSettings_FieldIndex
    {
        Enabled = 0,
        LowTierReductionLine = 1,
        LowTierCutLine = 2,
        HighTierReductionLine = 3,
        HighTierCutLine = 4,
        EpicSpawnsEnabled = 5,
        EpicTierSoftCutLine = 6,
        EpicTierCutLine = 7,
        EpicTierPercentChance = 8,
        ForceTrueLevels = 9,
        ReviveDeadLLists = 10,
        Debug = 11,
        Count = 12,
        Performance = 13,
    }
    #endregion

    #region Registration
    public class ModSettings_Registration : ILoquiRegistration
    {
        public static readonly ModSettings_Registration Instance = new ModSettings_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_DynamicLeveledLists.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_DynamicLeveledLists.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "f211e512-c7b8-4a63-b21b-944ebb7c633d";

        public const ushort AdditionalFieldCount = 14;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(ModSettings_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ModSettings_ErrorMask);

        public static readonly Type ClassType = typeof(ModSettings);

        public static readonly Type GetterType = typeof(IModSettingsGetter);

        public static readonly Type SetterType = typeof(IModSettings);

        public static readonly Type CommonType = typeof(ModSettingsCommon);

        public const string FullName = "DynamicLeveledLists.ModSettings";

        public const string Name = "ModSettings";

        public const string Namespace = "DynamicLeveledLists";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ENABLED":
                    return (ushort)ModSettings_FieldIndex.Enabled;
                case "LOWTIERREDUCTIONLINE":
                    return (ushort)ModSettings_FieldIndex.LowTierReductionLine;
                case "LOWTIERCUTLINE":
                    return (ushort)ModSettings_FieldIndex.LowTierCutLine;
                case "HIGHTIERREDUCTIONLINE":
                    return (ushort)ModSettings_FieldIndex.HighTierReductionLine;
                case "HIGHTIERCUTLINE":
                    return (ushort)ModSettings_FieldIndex.HighTierCutLine;
                case "EPICSPAWNSENABLED":
                    return (ushort)ModSettings_FieldIndex.EpicSpawnsEnabled;
                case "EPICTIERSOFTCUTLINE":
                    return (ushort)ModSettings_FieldIndex.EpicTierSoftCutLine;
                case "EPICTIERCUTLINE":
                    return (ushort)ModSettings_FieldIndex.EpicTierCutLine;
                case "EPICTIERPERCENTCHANCE":
                    return (ushort)ModSettings_FieldIndex.EpicTierPercentChance;
                case "FORCETRUELEVELS":
                    return (ushort)ModSettings_FieldIndex.ForceTrueLevels;
                case "REVIVEDEADLLISTS":
                    return (ushort)ModSettings_FieldIndex.ReviveDeadLLists;
                case "DEBUG":
                    return (ushort)ModSettings_FieldIndex.Debug;
                case "COUNT":
                    return (ushort)ModSettings_FieldIndex.Count;
                case "PERFORMANCE":
                    return (ushort)ModSettings_FieldIndex.Performance;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ModSettings_FieldIndex enu = (ModSettings_FieldIndex)index;
            switch (enu)
            {
                case ModSettings_FieldIndex.Enabled:
                case ModSettings_FieldIndex.LowTierReductionLine:
                case ModSettings_FieldIndex.LowTierCutLine:
                case ModSettings_FieldIndex.HighTierReductionLine:
                case ModSettings_FieldIndex.HighTierCutLine:
                case ModSettings_FieldIndex.EpicSpawnsEnabled:
                case ModSettings_FieldIndex.EpicTierSoftCutLine:
                case ModSettings_FieldIndex.EpicTierCutLine:
                case ModSettings_FieldIndex.EpicTierPercentChance:
                case ModSettings_FieldIndex.ForceTrueLevels:
                case ModSettings_FieldIndex.ReviveDeadLLists:
                case ModSettings_FieldIndex.Debug:
                case ModSettings_FieldIndex.Count:
                case ModSettings_FieldIndex.Performance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ModSettings_FieldIndex enu = (ModSettings_FieldIndex)index;
            switch (enu)
            {
                case ModSettings_FieldIndex.Debug:
                case ModSettings_FieldIndex.Count:
                case ModSettings_FieldIndex.Performance:
                    return true;
                case ModSettings_FieldIndex.Enabled:
                case ModSettings_FieldIndex.LowTierReductionLine:
                case ModSettings_FieldIndex.LowTierCutLine:
                case ModSettings_FieldIndex.HighTierReductionLine:
                case ModSettings_FieldIndex.HighTierCutLine:
                case ModSettings_FieldIndex.EpicSpawnsEnabled:
                case ModSettings_FieldIndex.EpicTierSoftCutLine:
                case ModSettings_FieldIndex.EpicTierCutLine:
                case ModSettings_FieldIndex.EpicTierPercentChance:
                case ModSettings_FieldIndex.ForceTrueLevels:
                case ModSettings_FieldIndex.ReviveDeadLLists:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ModSettings_FieldIndex enu = (ModSettings_FieldIndex)index;
            switch (enu)
            {
                case ModSettings_FieldIndex.Enabled:
                case ModSettings_FieldIndex.LowTierReductionLine:
                case ModSettings_FieldIndex.LowTierCutLine:
                case ModSettings_FieldIndex.HighTierReductionLine:
                case ModSettings_FieldIndex.HighTierCutLine:
                case ModSettings_FieldIndex.EpicSpawnsEnabled:
                case ModSettings_FieldIndex.EpicTierSoftCutLine:
                case ModSettings_FieldIndex.EpicTierCutLine:
                case ModSettings_FieldIndex.EpicTierPercentChance:
                case ModSettings_FieldIndex.ForceTrueLevels:
                case ModSettings_FieldIndex.ReviveDeadLLists:
                case ModSettings_FieldIndex.Debug:
                case ModSettings_FieldIndex.Count:
                case ModSettings_FieldIndex.Performance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ModSettings_FieldIndex enu = (ModSettings_FieldIndex)index;
            switch (enu)
            {
                case ModSettings_FieldIndex.Enabled:
                    return "Enabled";
                case ModSettings_FieldIndex.LowTierReductionLine:
                    return "LowTierReductionLine";
                case ModSettings_FieldIndex.LowTierCutLine:
                    return "LowTierCutLine";
                case ModSettings_FieldIndex.HighTierReductionLine:
                    return "HighTierReductionLine";
                case ModSettings_FieldIndex.HighTierCutLine:
                    return "HighTierCutLine";
                case ModSettings_FieldIndex.EpicSpawnsEnabled:
                    return "EpicSpawnsEnabled";
                case ModSettings_FieldIndex.EpicTierSoftCutLine:
                    return "EpicTierSoftCutLine";
                case ModSettings_FieldIndex.EpicTierCutLine:
                    return "EpicTierCutLine";
                case ModSettings_FieldIndex.EpicTierPercentChance:
                    return "EpicTierPercentChance";
                case ModSettings_FieldIndex.ForceTrueLevels:
                    return "ForceTrueLevels";
                case ModSettings_FieldIndex.ReviveDeadLLists:
                    return "ReviveDeadLLists";
                case ModSettings_FieldIndex.Debug:
                    return "Debug";
                case ModSettings_FieldIndex.Count:
                    return "Count";
                case ModSettings_FieldIndex.Performance:
                    return "Performance";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ModSettings_FieldIndex enu = (ModSettings_FieldIndex)index;
            switch (enu)
            {
                case ModSettings_FieldIndex.Enabled:
                case ModSettings_FieldIndex.LowTierReductionLine:
                case ModSettings_FieldIndex.LowTierCutLine:
                case ModSettings_FieldIndex.HighTierReductionLine:
                case ModSettings_FieldIndex.HighTierCutLine:
                case ModSettings_FieldIndex.EpicSpawnsEnabled:
                case ModSettings_FieldIndex.EpicTierSoftCutLine:
                case ModSettings_FieldIndex.EpicTierCutLine:
                case ModSettings_FieldIndex.EpicTierPercentChance:
                case ModSettings_FieldIndex.ForceTrueLevels:
                case ModSettings_FieldIndex.ReviveDeadLLists:
                case ModSettings_FieldIndex.Debug:
                case ModSettings_FieldIndex.Count:
                case ModSettings_FieldIndex.Performance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ModSettings_FieldIndex enu = (ModSettings_FieldIndex)index;
            switch (enu)
            {
                case ModSettings_FieldIndex.Enabled:
                case ModSettings_FieldIndex.LowTierReductionLine:
                case ModSettings_FieldIndex.LowTierCutLine:
                case ModSettings_FieldIndex.HighTierReductionLine:
                case ModSettings_FieldIndex.HighTierCutLine:
                case ModSettings_FieldIndex.EpicSpawnsEnabled:
                case ModSettings_FieldIndex.EpicTierSoftCutLine:
                case ModSettings_FieldIndex.EpicTierCutLine:
                case ModSettings_FieldIndex.EpicTierPercentChance:
                case ModSettings_FieldIndex.ForceTrueLevels:
                case ModSettings_FieldIndex.ReviveDeadLLists:
                case ModSettings_FieldIndex.Debug:
                case ModSettings_FieldIndex.Count:
                case ModSettings_FieldIndex.Performance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ModSettings_FieldIndex enu = (ModSettings_FieldIndex)index;
            switch (enu)
            {
                case ModSettings_FieldIndex.Enabled:
                    return typeof(Boolean);
                case ModSettings_FieldIndex.LowTierReductionLine:
                    return typeof(Byte);
                case ModSettings_FieldIndex.LowTierCutLine:
                    return typeof(Byte);
                case ModSettings_FieldIndex.HighTierReductionLine:
                    return typeof(Byte);
                case ModSettings_FieldIndex.HighTierCutLine:
                    return typeof(Byte);
                case ModSettings_FieldIndex.EpicSpawnsEnabled:
                    return typeof(Boolean);
                case ModSettings_FieldIndex.EpicTierSoftCutLine:
                    return typeof(Byte);
                case ModSettings_FieldIndex.EpicTierCutLine:
                    return typeof(Byte);
                case ModSettings_FieldIndex.EpicTierPercentChance:
                    return typeof(Percent);
                case ModSettings_FieldIndex.ForceTrueLevels:
                    return typeof(Boolean);
                case ModSettings_FieldIndex.ReviveDeadLLists:
                    return typeof(Boolean);
                case ModSettings_FieldIndex.Debug:
                    return typeof(DebugSettings);
                case ModSettings_FieldIndex.Count:
                    return typeof(CountSettings);
                case ModSettings_FieldIndex.Performance:
                    return typeof(SpawningPerformance);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ModSettingsCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IModSettings item,
            IModSettingsGetter rhs,
            IModSettingsGetter def,
            ErrorMaskBuilder errorMask,
            ModSettings_CopyMask copyMask)
        {
            if (copyMask?.Enabled ?? true)
            {
                errorMask?.PushIndex((int)ModSettings_FieldIndex.Enabled);
                try
                {
                    item.Enabled = rhs.Enabled;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LowTierReductionLine ?? true)
            {
                errorMask?.PushIndex((int)ModSettings_FieldIndex.LowTierReductionLine);
                try
                {
                    item.LowTierReductionLine = rhs.LowTierReductionLine;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LowTierCutLine ?? true)
            {
                errorMask?.PushIndex((int)ModSettings_FieldIndex.LowTierCutLine);
                try
                {
                    item.LowTierCutLine = rhs.LowTierCutLine;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.HighTierReductionLine ?? true)
            {
                errorMask?.PushIndex((int)ModSettings_FieldIndex.HighTierReductionLine);
                try
                {
                    item.HighTierReductionLine = rhs.HighTierReductionLine;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.HighTierCutLine ?? true)
            {
                errorMask?.PushIndex((int)ModSettings_FieldIndex.HighTierCutLine);
                try
                {
                    item.HighTierCutLine = rhs.HighTierCutLine;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EpicSpawnsEnabled ?? true)
            {
                errorMask?.PushIndex((int)ModSettings_FieldIndex.EpicSpawnsEnabled);
                try
                {
                    item.EpicSpawnsEnabled = rhs.EpicSpawnsEnabled;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EpicTierSoftCutLine ?? true)
            {
                errorMask?.PushIndex((int)ModSettings_FieldIndex.EpicTierSoftCutLine);
                try
                {
                    item.EpicTierSoftCutLine = rhs.EpicTierSoftCutLine;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EpicTierCutLine ?? true)
            {
                errorMask?.PushIndex((int)ModSettings_FieldIndex.EpicTierCutLine);
                try
                {
                    item.EpicTierCutLine = rhs.EpicTierCutLine;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EpicTierPercentChance ?? true)
            {
                errorMask?.PushIndex((int)ModSettings_FieldIndex.EpicTierPercentChance);
                try
                {
                    item.EpicTierPercentChance = rhs.EpicTierPercentChance;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ForceTrueLevels ?? true)
            {
                errorMask?.PushIndex((int)ModSettings_FieldIndex.ForceTrueLevels);
                try
                {
                    item.ForceTrueLevels = rhs.ForceTrueLevels;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ReviveDeadLLists ?? true)
            {
                errorMask?.PushIndex((int)ModSettings_FieldIndex.ReviveDeadLLists);
                try
                {
                    item.ReviveDeadLLists = rhs.ReviveDeadLLists;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Debug.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)ModSettings_FieldIndex.Debug);
                try
                {
                    switch (copyMask?.Debug?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.Debug = rhs.Debug;
                            break;
                        case CopyOption.CopyIn:
                            DebugSettingsCommon.CopyFieldsFrom(
                                item: item.Debug,
                                rhs: rhs.Debug,
                                def: def?.Debug,
                                errorMask: errorMask,
                                copyMask: copyMask?.Debug.Specific);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.Debug == null)
                            {
                                item.Debug = null;
                            }
                            else
                            {
                                item.Debug = DebugSettings.Copy(
                                    rhs.Debug,
                                    copyMask?.Debug?.Specific,
                                    def?.Debug);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.Debug?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Count.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)ModSettings_FieldIndex.Count);
                try
                {
                    switch (copyMask?.Count?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.Count = rhs.Count;
                            break;
                        case CopyOption.CopyIn:
                            CountSettingsCommon.CopyFieldsFrom(
                                item: item.Count,
                                rhs: rhs.Count,
                                def: def?.Count,
                                errorMask: errorMask,
                                copyMask: copyMask?.Count.Specific);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.Count == null)
                            {
                                item.Count = null;
                            }
                            else
                            {
                                item.Count = CountSettings.Copy(
                                    rhs.Count,
                                    copyMask?.Count?.Specific,
                                    def?.Count);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.Count?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Performance.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)ModSettings_FieldIndex.Performance);
                try
                {
                    switch (copyMask?.Performance?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.Performance = rhs.Performance;
                            break;
                        case CopyOption.CopyIn:
                            SpawningPerformanceCommon.CopyFieldsFrom(
                                item: item.Performance,
                                rhs: rhs.Performance,
                                def: def?.Performance,
                                errorMask: errorMask,
                                copyMask: copyMask?.Performance.Specific);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.Performance == null)
                            {
                                item.Performance = null;
                            }
                            else
                            {
                                item.Performance = SpawningPerformance.Copy(
                                    rhs.Performance,
                                    copyMask?.Performance?.Specific,
                                    def?.Performance);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.Performance?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(IModSettings item)
        {
            item.Enabled = default(Boolean);
            item.LowTierReductionLine = default(Byte);
            item.LowTierCutLine = default(Byte);
            item.HighTierReductionLine = default(Byte);
            item.HighTierCutLine = default(Byte);
            item.EpicSpawnsEnabled = default(Boolean);
            item.EpicTierSoftCutLine = default(Byte);
            item.EpicTierCutLine = default(Byte);
            item.EpicTierPercentChance = default(Percent);
            item.ForceTrueLevels = default(Boolean);
            item.ReviveDeadLLists = default(Boolean);
            item.Debug = default(DebugSettings);
            item.Count = default(CountSettings);
            item.Performance = default(SpawningPerformance);
        }

        public static ModSettings_Mask<bool> GetEqualsMask(
            this IModSettingsGetter item,
            IModSettingsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ModSettings_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IModSettingsGetter item,
            IModSettingsGetter rhs,
            ModSettings_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Enabled = item.Enabled == rhs.Enabled;
            ret.LowTierReductionLine = item.LowTierReductionLine == rhs.LowTierReductionLine;
            ret.LowTierCutLine = item.LowTierCutLine == rhs.LowTierCutLine;
            ret.HighTierReductionLine = item.HighTierReductionLine == rhs.HighTierReductionLine;
            ret.HighTierCutLine = item.HighTierCutLine == rhs.HighTierCutLine;
            ret.EpicSpawnsEnabled = item.EpicSpawnsEnabled == rhs.EpicSpawnsEnabled;
            ret.EpicTierSoftCutLine = item.EpicTierSoftCutLine == rhs.EpicTierSoftCutLine;
            ret.EpicTierCutLine = item.EpicTierCutLine == rhs.EpicTierCutLine;
            ret.EpicTierPercentChance = item.EpicTierPercentChance.Equals(rhs.EpicTierPercentChance);
            ret.ForceTrueLevels = item.ForceTrueLevels == rhs.ForceTrueLevels;
            ret.ReviveDeadLLists = item.ReviveDeadLLists == rhs.ReviveDeadLLists;
            ret.Debug = MaskItemExt.Factory(DebugSettingsCommon.GetEqualsMask(item.Debug, rhs.Debug, include), include);
            ret.Count = MaskItemExt.Factory(CountSettingsCommon.GetEqualsMask(item.Count, rhs.Count, include), include);
            ret.Performance = MaskItemExt.Factory(SpawningPerformanceCommon.GetEqualsMask(item.Performance, rhs.Performance, include), include);
        }

        public static string ToString(
            this IModSettingsGetter item,
            string name = null,
            ModSettings_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IModSettingsGetter item,
            FileGeneration fg,
            string name = null,
            ModSettings_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(ModSettings)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(ModSettings)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Enabled ?? true)
                {
                    fg.AppendLine($"Enabled => {item.Enabled}");
                }
                if (printMask?.LowTierReductionLine ?? true)
                {
                    fg.AppendLine($"LowTierReductionLine => {item.LowTierReductionLine}");
                }
                if (printMask?.LowTierCutLine ?? true)
                {
                    fg.AppendLine($"LowTierCutLine => {item.LowTierCutLine}");
                }
                if (printMask?.HighTierReductionLine ?? true)
                {
                    fg.AppendLine($"HighTierReductionLine => {item.HighTierReductionLine}");
                }
                if (printMask?.HighTierCutLine ?? true)
                {
                    fg.AppendLine($"HighTierCutLine => {item.HighTierCutLine}");
                }
                if (printMask?.EpicSpawnsEnabled ?? true)
                {
                    fg.AppendLine($"EpicSpawnsEnabled => {item.EpicSpawnsEnabled}");
                }
                if (printMask?.EpicTierSoftCutLine ?? true)
                {
                    fg.AppendLine($"EpicTierSoftCutLine => {item.EpicTierSoftCutLine}");
                }
                if (printMask?.EpicTierCutLine ?? true)
                {
                    fg.AppendLine($"EpicTierCutLine => {item.EpicTierCutLine}");
                }
                if (printMask?.EpicTierPercentChance ?? true)
                {
                    fg.AppendLine($"EpicTierPercentChance => {item.EpicTierPercentChance}");
                }
                if (printMask?.ForceTrueLevels ?? true)
                {
                    fg.AppendLine($"ForceTrueLevels => {item.ForceTrueLevels}");
                }
                if (printMask?.ReviveDeadLLists ?? true)
                {
                    fg.AppendLine($"ReviveDeadLLists => {item.ReviveDeadLLists}");
                }
                if (printMask?.Debug?.Overall ?? true)
                {
                    item.Debug?.ToString(fg, "Debug");
                }
                if (printMask?.Count?.Overall ?? true)
                {
                    item.Count?.ToString(fg, "Count");
                }
                if (printMask?.Performance?.Overall ?? true)
                {
                    item.Performance?.ToString(fg, "Performance");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IModSettingsGetter item,
            ModSettings_Mask<bool?> checkMask)
        {
            return true;
        }

        public static ModSettings_Mask<bool> GetHasBeenSetMask(IModSettingsGetter item)
        {
            var ret = new ModSettings_Mask<bool>();
            ret.Enabled = true;
            ret.LowTierReductionLine = true;
            ret.LowTierCutLine = true;
            ret.HighTierReductionLine = true;
            ret.HighTierCutLine = true;
            ret.EpicSpawnsEnabled = true;
            ret.EpicTierSoftCutLine = true;
            ret.EpicTierCutLine = true;
            ret.EpicTierPercentChance = true;
            ret.ForceTrueLevels = true;
            ret.ReviveDeadLLists = true;
            ret.Debug = new MaskItem<bool, DebugSettings_Mask<bool>>(true, DebugSettingsCommon.GetHasBeenSetMask(item.Debug));
            ret.Count = new MaskItem<bool, CountSettings_Mask<bool>>(true, CountSettingsCommon.GetHasBeenSetMask(item.Count));
            ret.Performance = new MaskItem<bool, SpawningPerformance_Mask<bool>>(true, SpawningPerformanceCommon.GetHasBeenSetMask(item.Performance));
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            ModSettings item,
            bool doMasks,
            out ModSettings_ErrorMask errorMask,
            ModSettings_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ModSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            ModSettings item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "DynamicLeveledLists.ModSettings");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "DynamicLeveledLists.ModSettings");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this ModSettings item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.Enabled) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Enabled),
                    item: item.Enabled,
                    fieldIndex: (int)ModSettings_FieldIndex.Enabled,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.LowTierReductionLine) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LowTierReductionLine),
                    item: item.LowTierReductionLine,
                    fieldIndex: (int)ModSettings_FieldIndex.LowTierReductionLine,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.LowTierCutLine) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LowTierCutLine),
                    item: item.LowTierCutLine,
                    fieldIndex: (int)ModSettings_FieldIndex.LowTierCutLine,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.HighTierReductionLine) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HighTierReductionLine),
                    item: item.HighTierReductionLine,
                    fieldIndex: (int)ModSettings_FieldIndex.HighTierReductionLine,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.HighTierCutLine) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HighTierCutLine),
                    item: item.HighTierCutLine,
                    fieldIndex: (int)ModSettings_FieldIndex.HighTierCutLine,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.EpicSpawnsEnabled) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EpicSpawnsEnabled),
                    item: item.EpicSpawnsEnabled,
                    fieldIndex: (int)ModSettings_FieldIndex.EpicSpawnsEnabled,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.EpicTierSoftCutLine) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EpicTierSoftCutLine),
                    item: item.EpicTierSoftCutLine,
                    fieldIndex: (int)ModSettings_FieldIndex.EpicTierSoftCutLine,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.EpicTierCutLine) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EpicTierCutLine),
                    item: item.EpicTierCutLine,
                    fieldIndex: (int)ModSettings_FieldIndex.EpicTierCutLine,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.EpicTierPercentChance) ?? true))
            {
                PercentXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EpicTierPercentChance),
                    item: item.EpicTierPercentChance,
                    fieldIndex: (int)ModSettings_FieldIndex.EpicTierPercentChance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.ForceTrueLevels) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ForceTrueLevels),
                    item: item.ForceTrueLevels,
                    fieldIndex: (int)ModSettings_FieldIndex.ForceTrueLevels,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.ReviveDeadLLists) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ReviveDeadLLists),
                    item: item.ReviveDeadLLists,
                    fieldIndex: (int)ModSettings_FieldIndex.ReviveDeadLLists,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.Debug) ?? true))
            {
                LoquiXmlTranslation<DebugSettings>.Instance.Write(
                    node: node,
                    item: item.Debug,
                    name: nameof(item.Debug),
                    fieldIndex: (int)ModSettings_FieldIndex.Debug,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ModSettings_FieldIndex.Debug));
            }
            if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.Count) ?? true))
            {
                LoquiXmlTranslation<CountSettings>.Instance.Write(
                    node: node,
                    item: item.Count,
                    name: nameof(item.Count),
                    fieldIndex: (int)ModSettings_FieldIndex.Count,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ModSettings_FieldIndex.Count));
            }
            if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.Performance) ?? true))
            {
                LoquiXmlTranslation<SpawningPerformance>.Instance.Write(
                    node: node,
                    item: item.Performance,
                    name: nameof(item.Performance),
                    fieldIndex: (int)ModSettings_FieldIndex.Performance,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ModSettings_FieldIndex.Performance));
            }
        }

        public static void FillPublic_Xml(
            this ModSettings item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ModSettingsCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this ModSettings item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Enabled":
                    if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.Enabled) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)ModSettings_FieldIndex.Enabled);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean EnabledParse,
                                errorMask: errorMask))
                            {
                                item.Enabled = EnabledParse;
                            }
                            else
                            {
                                item.Enabled = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "LowTierReductionLine":
                    if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.LowTierReductionLine) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)ModSettings_FieldIndex.LowTierReductionLine);
                            if (ByteXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Byte LowTierReductionLineParse,
                                errorMask: errorMask))
                            {
                                item.LowTierReductionLine = LowTierReductionLineParse;
                            }
                            else
                            {
                                item.LowTierReductionLine = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "LowTierCutLine":
                    if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.LowTierCutLine) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)ModSettings_FieldIndex.LowTierCutLine);
                            if (ByteXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Byte LowTierCutLineParse,
                                errorMask: errorMask))
                            {
                                item.LowTierCutLine = LowTierCutLineParse;
                            }
                            else
                            {
                                item.LowTierCutLine = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "HighTierReductionLine":
                    if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.HighTierReductionLine) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)ModSettings_FieldIndex.HighTierReductionLine);
                            if (ByteXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Byte HighTierReductionLineParse,
                                errorMask: errorMask))
                            {
                                item.HighTierReductionLine = HighTierReductionLineParse;
                            }
                            else
                            {
                                item.HighTierReductionLine = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "HighTierCutLine":
                    if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.HighTierCutLine) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)ModSettings_FieldIndex.HighTierCutLine);
                            if (ByteXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Byte HighTierCutLineParse,
                                errorMask: errorMask))
                            {
                                item.HighTierCutLine = HighTierCutLineParse;
                            }
                            else
                            {
                                item.HighTierCutLine = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "EpicSpawnsEnabled":
                    if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.EpicSpawnsEnabled) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)ModSettings_FieldIndex.EpicSpawnsEnabled);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean EpicSpawnsEnabledParse,
                                errorMask: errorMask))
                            {
                                item.EpicSpawnsEnabled = EpicSpawnsEnabledParse;
                            }
                            else
                            {
                                item.EpicSpawnsEnabled = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "EpicTierSoftCutLine":
                    if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.EpicTierSoftCutLine) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)ModSettings_FieldIndex.EpicTierSoftCutLine);
                            if (ByteXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Byte EpicTierSoftCutLineParse,
                                errorMask: errorMask))
                            {
                                item.EpicTierSoftCutLine = EpicTierSoftCutLineParse;
                            }
                            else
                            {
                                item.EpicTierSoftCutLine = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "EpicTierCutLine":
                    if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.EpicTierCutLine) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)ModSettings_FieldIndex.EpicTierCutLine);
                            if (ByteXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Byte EpicTierCutLineParse,
                                errorMask: errorMask))
                            {
                                item.EpicTierCutLine = EpicTierCutLineParse;
                            }
                            else
                            {
                                item.EpicTierCutLine = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "EpicTierPercentChance":
                    if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.EpicTierPercentChance) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)ModSettings_FieldIndex.EpicTierPercentChance);
                            if (PercentXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Percent EpicTierPercentChanceParse,
                                errorMask: errorMask))
                            {
                                item.EpicTierPercentChance = EpicTierPercentChanceParse;
                            }
                            else
                            {
                                item.EpicTierPercentChance = default(Percent);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "ForceTrueLevels":
                    if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.ForceTrueLevels) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)ModSettings_FieldIndex.ForceTrueLevels);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean ForceTrueLevelsParse,
                                errorMask: errorMask))
                            {
                                item.ForceTrueLevels = ForceTrueLevelsParse;
                            }
                            else
                            {
                                item.ForceTrueLevels = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "ReviveDeadLLists":
                    if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.ReviveDeadLLists) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)ModSettings_FieldIndex.ReviveDeadLLists);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean ReviveDeadLListsParse,
                                errorMask: errorMask))
                            {
                                item.ReviveDeadLLists = ReviveDeadLListsParse;
                            }
                            else
                            {
                                item.ReviveDeadLLists = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "Debug":
                    if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.Debug) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)ModSettings_FieldIndex.Debug);
                            if (LoquiXmlTranslation<DebugSettings>.Instance.Parse(
                                node: node,
                                item: out DebugSettings DebugParse,
                                errorMask: errorMask,
                                translationMask: translationMask?.GetSubCrystal((int)ModSettings_FieldIndex.Debug)))
                            {
                                item.Debug = DebugParse;
                            }
                            else
                            {
                                item.Debug = default(DebugSettings);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "Count":
                    if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.Count) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)ModSettings_FieldIndex.Count);
                            if (LoquiXmlTranslation<CountSettings>.Instance.Parse(
                                node: node,
                                item: out CountSettings CountParse,
                                errorMask: errorMask,
                                translationMask: translationMask?.GetSubCrystal((int)ModSettings_FieldIndex.Count)))
                            {
                                item.Count = CountParse;
                            }
                            else
                            {
                                item.Count = default(CountSettings);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "Performance":
                    if ((translationMask?.GetShouldTranslate((int)ModSettings_FieldIndex.Performance) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)ModSettings_FieldIndex.Performance);
                            if (LoquiXmlTranslation<SpawningPerformance>.Instance.Parse(
                                node: node,
                                item: out SpawningPerformance PerformanceParse,
                                errorMask: errorMask,
                                translationMask: translationMask?.GetSubCrystal((int)ModSettings_FieldIndex.Performance)))
                            {
                                item.Performance = PerformanceParse;
                            }
                            else
                            {
                                item.Performance = default(SpawningPerformance);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class ModSettings_Mask<T> : IMask<T>, IEquatable<ModSettings_Mask<T>>
    {
        #region Ctors
        public ModSettings_Mask()
        {
        }

        public ModSettings_Mask(T initialValue)
        {
            this.Enabled = initialValue;
            this.LowTierReductionLine = initialValue;
            this.LowTierCutLine = initialValue;
            this.HighTierReductionLine = initialValue;
            this.HighTierCutLine = initialValue;
            this.EpicSpawnsEnabled = initialValue;
            this.EpicTierSoftCutLine = initialValue;
            this.EpicTierCutLine = initialValue;
            this.EpicTierPercentChance = initialValue;
            this.ForceTrueLevels = initialValue;
            this.ReviveDeadLLists = initialValue;
            this.Debug = new MaskItem<T, DebugSettings_Mask<T>>(initialValue, new DebugSettings_Mask<T>(initialValue));
            this.Count = new MaskItem<T, CountSettings_Mask<T>>(initialValue, new CountSettings_Mask<T>(initialValue));
            this.Performance = new MaskItem<T, SpawningPerformance_Mask<T>>(initialValue, new SpawningPerformance_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public T Enabled;
        public T LowTierReductionLine;
        public T LowTierCutLine;
        public T HighTierReductionLine;
        public T HighTierCutLine;
        public T EpicSpawnsEnabled;
        public T EpicTierSoftCutLine;
        public T EpicTierCutLine;
        public T EpicTierPercentChance;
        public T ForceTrueLevels;
        public T ReviveDeadLLists;
        public MaskItem<T, DebugSettings_Mask<T>> Debug { get; set; }
        public MaskItem<T, CountSettings_Mask<T>> Count { get; set; }
        public MaskItem<T, SpawningPerformance_Mask<T>> Performance { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ModSettings_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ModSettings_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Enabled, rhs.Enabled)) return false;
            if (!object.Equals(this.LowTierReductionLine, rhs.LowTierReductionLine)) return false;
            if (!object.Equals(this.LowTierCutLine, rhs.LowTierCutLine)) return false;
            if (!object.Equals(this.HighTierReductionLine, rhs.HighTierReductionLine)) return false;
            if (!object.Equals(this.HighTierCutLine, rhs.HighTierCutLine)) return false;
            if (!object.Equals(this.EpicSpawnsEnabled, rhs.EpicSpawnsEnabled)) return false;
            if (!object.Equals(this.EpicTierSoftCutLine, rhs.EpicTierSoftCutLine)) return false;
            if (!object.Equals(this.EpicTierCutLine, rhs.EpicTierCutLine)) return false;
            if (!object.Equals(this.EpicTierPercentChance, rhs.EpicTierPercentChance)) return false;
            if (!object.Equals(this.ForceTrueLevels, rhs.ForceTrueLevels)) return false;
            if (!object.Equals(this.ReviveDeadLLists, rhs.ReviveDeadLLists)) return false;
            if (!object.Equals(this.Debug, rhs.Debug)) return false;
            if (!object.Equals(this.Count, rhs.Count)) return false;
            if (!object.Equals(this.Performance, rhs.Performance)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Enabled?.GetHashCode());
            ret = ret.CombineHashCode(this.LowTierReductionLine?.GetHashCode());
            ret = ret.CombineHashCode(this.LowTierCutLine?.GetHashCode());
            ret = ret.CombineHashCode(this.HighTierReductionLine?.GetHashCode());
            ret = ret.CombineHashCode(this.HighTierCutLine?.GetHashCode());
            ret = ret.CombineHashCode(this.EpicSpawnsEnabled?.GetHashCode());
            ret = ret.CombineHashCode(this.EpicTierSoftCutLine?.GetHashCode());
            ret = ret.CombineHashCode(this.EpicTierCutLine?.GetHashCode());
            ret = ret.CombineHashCode(this.EpicTierPercentChance?.GetHashCode());
            ret = ret.CombineHashCode(this.ForceTrueLevels?.GetHashCode());
            ret = ret.CombineHashCode(this.ReviveDeadLLists?.GetHashCode());
            ret = ret.CombineHashCode(this.Debug?.GetHashCode());
            ret = ret.CombineHashCode(this.Count?.GetHashCode());
            ret = ret.CombineHashCode(this.Performance?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Enabled)) return false;
            if (!eval(this.LowTierReductionLine)) return false;
            if (!eval(this.LowTierCutLine)) return false;
            if (!eval(this.HighTierReductionLine)) return false;
            if (!eval(this.HighTierCutLine)) return false;
            if (!eval(this.EpicSpawnsEnabled)) return false;
            if (!eval(this.EpicTierSoftCutLine)) return false;
            if (!eval(this.EpicTierCutLine)) return false;
            if (!eval(this.EpicTierPercentChance)) return false;
            if (!eval(this.ForceTrueLevels)) return false;
            if (!eval(this.ReviveDeadLLists)) return false;
            if (Debug != null)
            {
                if (!eval(this.Debug.Overall)) return false;
                if (this.Debug.Specific != null && !this.Debug.Specific.AllEqual(eval)) return false;
            }
            if (Count != null)
            {
                if (!eval(this.Count.Overall)) return false;
                if (this.Count.Specific != null && !this.Count.Specific.AllEqual(eval)) return false;
            }
            if (Performance != null)
            {
                if (!eval(this.Performance.Overall)) return false;
                if (this.Performance.Specific != null && !this.Performance.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public ModSettings_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ModSettings_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ModSettings_Mask<R> obj, Func<T, R> eval)
        {
            obj.Enabled = eval(this.Enabled);
            obj.LowTierReductionLine = eval(this.LowTierReductionLine);
            obj.LowTierCutLine = eval(this.LowTierCutLine);
            obj.HighTierReductionLine = eval(this.HighTierReductionLine);
            obj.HighTierCutLine = eval(this.HighTierCutLine);
            obj.EpicSpawnsEnabled = eval(this.EpicSpawnsEnabled);
            obj.EpicTierSoftCutLine = eval(this.EpicTierSoftCutLine);
            obj.EpicTierCutLine = eval(this.EpicTierCutLine);
            obj.EpicTierPercentChance = eval(this.EpicTierPercentChance);
            obj.ForceTrueLevels = eval(this.ForceTrueLevels);
            obj.ReviveDeadLLists = eval(this.ReviveDeadLLists);
            if (this.Debug != null)
            {
                obj.Debug = new MaskItem<R, DebugSettings_Mask<R>>();
                obj.Debug.Overall = eval(this.Debug.Overall);
                if (this.Debug.Specific != null)
                {
                    obj.Debug.Specific = this.Debug.Specific.Translate(eval);
                }
            }
            if (this.Count != null)
            {
                obj.Count = new MaskItem<R, CountSettings_Mask<R>>();
                obj.Count.Overall = eval(this.Count.Overall);
                if (this.Count.Specific != null)
                {
                    obj.Count.Specific = this.Count.Specific.Translate(eval);
                }
            }
            if (this.Performance != null)
            {
                obj.Performance = new MaskItem<R, SpawningPerformance_Mask<R>>();
                obj.Performance.Overall = eval(this.Performance.Overall);
                if (this.Performance.Specific != null)
                {
                    obj.Performance.Specific = this.Performance.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ModSettings_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ModSettings_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ModSettings_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Enabled ?? true)
                {
                    fg.AppendLine($"Enabled => {Enabled}");
                }
                if (printMask?.LowTierReductionLine ?? true)
                {
                    fg.AppendLine($"LowTierReductionLine => {LowTierReductionLine}");
                }
                if (printMask?.LowTierCutLine ?? true)
                {
                    fg.AppendLine($"LowTierCutLine => {LowTierCutLine}");
                }
                if (printMask?.HighTierReductionLine ?? true)
                {
                    fg.AppendLine($"HighTierReductionLine => {HighTierReductionLine}");
                }
                if (printMask?.HighTierCutLine ?? true)
                {
                    fg.AppendLine($"HighTierCutLine => {HighTierCutLine}");
                }
                if (printMask?.EpicSpawnsEnabled ?? true)
                {
                    fg.AppendLine($"EpicSpawnsEnabled => {EpicSpawnsEnabled}");
                }
                if (printMask?.EpicTierSoftCutLine ?? true)
                {
                    fg.AppendLine($"EpicTierSoftCutLine => {EpicTierSoftCutLine}");
                }
                if (printMask?.EpicTierCutLine ?? true)
                {
                    fg.AppendLine($"EpicTierCutLine => {EpicTierCutLine}");
                }
                if (printMask?.EpicTierPercentChance ?? true)
                {
                    fg.AppendLine($"EpicTierPercentChance => {EpicTierPercentChance}");
                }
                if (printMask?.ForceTrueLevels ?? true)
                {
                    fg.AppendLine($"ForceTrueLevels => {ForceTrueLevels}");
                }
                if (printMask?.ReviveDeadLLists ?? true)
                {
                    fg.AppendLine($"ReviveDeadLLists => {ReviveDeadLLists}");
                }
                if (printMask?.Debug?.Overall ?? true)
                {
                    Debug?.ToString(fg);
                }
                if (printMask?.Count?.Overall ?? true)
                {
                    Count?.ToString(fg);
                }
                if (printMask?.Performance?.Overall ?? true)
                {
                    Performance?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ModSettings_ErrorMask : IErrorMask, IErrorMask<ModSettings_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Enabled;
        public Exception LowTierReductionLine;
        public Exception LowTierCutLine;
        public Exception HighTierReductionLine;
        public Exception HighTierCutLine;
        public Exception EpicSpawnsEnabled;
        public Exception EpicTierSoftCutLine;
        public Exception EpicTierCutLine;
        public Exception EpicTierPercentChance;
        public Exception ForceTrueLevels;
        public Exception ReviveDeadLLists;
        public MaskItem<Exception, DebugSettings_ErrorMask> Debug;
        public MaskItem<Exception, CountSettings_ErrorMask> Count;
        public MaskItem<Exception, SpawningPerformance_ErrorMask> Performance;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            ModSettings_FieldIndex enu = (ModSettings_FieldIndex)index;
            switch (enu)
            {
                case ModSettings_FieldIndex.Enabled:
                    return Enabled;
                case ModSettings_FieldIndex.LowTierReductionLine:
                    return LowTierReductionLine;
                case ModSettings_FieldIndex.LowTierCutLine:
                    return LowTierCutLine;
                case ModSettings_FieldIndex.HighTierReductionLine:
                    return HighTierReductionLine;
                case ModSettings_FieldIndex.HighTierCutLine:
                    return HighTierCutLine;
                case ModSettings_FieldIndex.EpicSpawnsEnabled:
                    return EpicSpawnsEnabled;
                case ModSettings_FieldIndex.EpicTierSoftCutLine:
                    return EpicTierSoftCutLine;
                case ModSettings_FieldIndex.EpicTierCutLine:
                    return EpicTierCutLine;
                case ModSettings_FieldIndex.EpicTierPercentChance:
                    return EpicTierPercentChance;
                case ModSettings_FieldIndex.ForceTrueLevels:
                    return ForceTrueLevels;
                case ModSettings_FieldIndex.ReviveDeadLLists:
                    return ReviveDeadLLists;
                case ModSettings_FieldIndex.Debug:
                    return Debug;
                case ModSettings_FieldIndex.Count:
                    return Count;
                case ModSettings_FieldIndex.Performance:
                    return Performance;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            ModSettings_FieldIndex enu = (ModSettings_FieldIndex)index;
            switch (enu)
            {
                case ModSettings_FieldIndex.Enabled:
                    this.Enabled = ex;
                    break;
                case ModSettings_FieldIndex.LowTierReductionLine:
                    this.LowTierReductionLine = ex;
                    break;
                case ModSettings_FieldIndex.LowTierCutLine:
                    this.LowTierCutLine = ex;
                    break;
                case ModSettings_FieldIndex.HighTierReductionLine:
                    this.HighTierReductionLine = ex;
                    break;
                case ModSettings_FieldIndex.HighTierCutLine:
                    this.HighTierCutLine = ex;
                    break;
                case ModSettings_FieldIndex.EpicSpawnsEnabled:
                    this.EpicSpawnsEnabled = ex;
                    break;
                case ModSettings_FieldIndex.EpicTierSoftCutLine:
                    this.EpicTierSoftCutLine = ex;
                    break;
                case ModSettings_FieldIndex.EpicTierCutLine:
                    this.EpicTierCutLine = ex;
                    break;
                case ModSettings_FieldIndex.EpicTierPercentChance:
                    this.EpicTierPercentChance = ex;
                    break;
                case ModSettings_FieldIndex.ForceTrueLevels:
                    this.ForceTrueLevels = ex;
                    break;
                case ModSettings_FieldIndex.ReviveDeadLLists:
                    this.ReviveDeadLLists = ex;
                    break;
                case ModSettings_FieldIndex.Debug:
                    this.Debug = new MaskItem<Exception, DebugSettings_ErrorMask>(ex, null);
                    break;
                case ModSettings_FieldIndex.Count:
                    this.Count = new MaskItem<Exception, CountSettings_ErrorMask>(ex, null);
                    break;
                case ModSettings_FieldIndex.Performance:
                    this.Performance = new MaskItem<Exception, SpawningPerformance_ErrorMask>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            ModSettings_FieldIndex enu = (ModSettings_FieldIndex)index;
            switch (enu)
            {
                case ModSettings_FieldIndex.Enabled:
                    this.Enabled = (Exception)obj;
                    break;
                case ModSettings_FieldIndex.LowTierReductionLine:
                    this.LowTierReductionLine = (Exception)obj;
                    break;
                case ModSettings_FieldIndex.LowTierCutLine:
                    this.LowTierCutLine = (Exception)obj;
                    break;
                case ModSettings_FieldIndex.HighTierReductionLine:
                    this.HighTierReductionLine = (Exception)obj;
                    break;
                case ModSettings_FieldIndex.HighTierCutLine:
                    this.HighTierCutLine = (Exception)obj;
                    break;
                case ModSettings_FieldIndex.EpicSpawnsEnabled:
                    this.EpicSpawnsEnabled = (Exception)obj;
                    break;
                case ModSettings_FieldIndex.EpicTierSoftCutLine:
                    this.EpicTierSoftCutLine = (Exception)obj;
                    break;
                case ModSettings_FieldIndex.EpicTierCutLine:
                    this.EpicTierCutLine = (Exception)obj;
                    break;
                case ModSettings_FieldIndex.EpicTierPercentChance:
                    this.EpicTierPercentChance = (Exception)obj;
                    break;
                case ModSettings_FieldIndex.ForceTrueLevels:
                    this.ForceTrueLevels = (Exception)obj;
                    break;
                case ModSettings_FieldIndex.ReviveDeadLLists:
                    this.ReviveDeadLLists = (Exception)obj;
                    break;
                case ModSettings_FieldIndex.Debug:
                    this.Debug = (MaskItem<Exception, DebugSettings_ErrorMask>)obj;
                    break;
                case ModSettings_FieldIndex.Count:
                    this.Count = (MaskItem<Exception, CountSettings_ErrorMask>)obj;
                    break;
                case ModSettings_FieldIndex.Performance:
                    this.Performance = (MaskItem<Exception, SpawningPerformance_ErrorMask>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Enabled != null) return true;
            if (LowTierReductionLine != null) return true;
            if (LowTierCutLine != null) return true;
            if (HighTierReductionLine != null) return true;
            if (HighTierCutLine != null) return true;
            if (EpicSpawnsEnabled != null) return true;
            if (EpicTierSoftCutLine != null) return true;
            if (EpicTierCutLine != null) return true;
            if (EpicTierPercentChance != null) return true;
            if (ForceTrueLevels != null) return true;
            if (ReviveDeadLLists != null) return true;
            if (Debug != null) return true;
            if (Count != null) return true;
            if (Performance != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("ModSettings_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Enabled => {Enabled}");
            fg.AppendLine($"LowTierReductionLine => {LowTierReductionLine}");
            fg.AppendLine($"LowTierCutLine => {LowTierCutLine}");
            fg.AppendLine($"HighTierReductionLine => {HighTierReductionLine}");
            fg.AppendLine($"HighTierCutLine => {HighTierCutLine}");
            fg.AppendLine($"EpicSpawnsEnabled => {EpicSpawnsEnabled}");
            fg.AppendLine($"EpicTierSoftCutLine => {EpicTierSoftCutLine}");
            fg.AppendLine($"EpicTierCutLine => {EpicTierCutLine}");
            fg.AppendLine($"EpicTierPercentChance => {EpicTierPercentChance}");
            fg.AppendLine($"ForceTrueLevels => {ForceTrueLevels}");
            fg.AppendLine($"ReviveDeadLLists => {ReviveDeadLLists}");
            Debug?.ToString(fg);
            Count?.ToString(fg);
            Performance?.ToString(fg);
        }
        #endregion

        #region Combine
        public ModSettings_ErrorMask Combine(ModSettings_ErrorMask rhs)
        {
            var ret = new ModSettings_ErrorMask();
            ret.Enabled = this.Enabled.Combine(rhs.Enabled);
            ret.LowTierReductionLine = this.LowTierReductionLine.Combine(rhs.LowTierReductionLine);
            ret.LowTierCutLine = this.LowTierCutLine.Combine(rhs.LowTierCutLine);
            ret.HighTierReductionLine = this.HighTierReductionLine.Combine(rhs.HighTierReductionLine);
            ret.HighTierCutLine = this.HighTierCutLine.Combine(rhs.HighTierCutLine);
            ret.EpicSpawnsEnabled = this.EpicSpawnsEnabled.Combine(rhs.EpicSpawnsEnabled);
            ret.EpicTierSoftCutLine = this.EpicTierSoftCutLine.Combine(rhs.EpicTierSoftCutLine);
            ret.EpicTierCutLine = this.EpicTierCutLine.Combine(rhs.EpicTierCutLine);
            ret.EpicTierPercentChance = this.EpicTierPercentChance.Combine(rhs.EpicTierPercentChance);
            ret.ForceTrueLevels = this.ForceTrueLevels.Combine(rhs.ForceTrueLevels);
            ret.ReviveDeadLLists = this.ReviveDeadLLists.Combine(rhs.ReviveDeadLLists);
            ret.Debug = new MaskItem<Exception, DebugSettings_ErrorMask>(this.Debug.Overall.Combine(rhs.Debug.Overall), ((IErrorMask<DebugSettings_ErrorMask>)this.Debug.Specific).Combine(rhs.Debug.Specific));
            ret.Count = new MaskItem<Exception, CountSettings_ErrorMask>(this.Count.Overall.Combine(rhs.Count.Overall), ((IErrorMask<CountSettings_ErrorMask>)this.Count.Specific).Combine(rhs.Count.Specific));
            ret.Performance = new MaskItem<Exception, SpawningPerformance_ErrorMask>(this.Performance.Overall.Combine(rhs.Performance.Overall), ((IErrorMask<SpawningPerformance_ErrorMask>)this.Performance.Specific).Combine(rhs.Performance.Specific));
            return ret;
        }
        public static ModSettings_ErrorMask Combine(ModSettings_ErrorMask lhs, ModSettings_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ModSettings_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ModSettings_ErrorMask();
        }
        #endregion

    }
    public class ModSettings_CopyMask
    {
        public ModSettings_CopyMask()
        {
        }

        public ModSettings_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Enabled = defaultOn;
            this.LowTierReductionLine = defaultOn;
            this.LowTierCutLine = defaultOn;
            this.HighTierReductionLine = defaultOn;
            this.HighTierCutLine = defaultOn;
            this.EpicSpawnsEnabled = defaultOn;
            this.EpicTierSoftCutLine = defaultOn;
            this.EpicTierCutLine = defaultOn;
            this.EpicTierPercentChance = defaultOn;
            this.ForceTrueLevels = defaultOn;
            this.ReviveDeadLLists = defaultOn;
            this.Debug = new MaskItem<CopyOption, DebugSettings_CopyMask>(deepCopyOption, default);
            this.Count = new MaskItem<CopyOption, CountSettings_CopyMask>(deepCopyOption, default);
            this.Performance = new MaskItem<CopyOption, SpawningPerformance_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public bool Enabled;
        public bool LowTierReductionLine;
        public bool LowTierCutLine;
        public bool HighTierReductionLine;
        public bool HighTierCutLine;
        public bool EpicSpawnsEnabled;
        public bool EpicTierSoftCutLine;
        public bool EpicTierCutLine;
        public bool EpicTierPercentChance;
        public bool ForceTrueLevels;
        public bool ReviveDeadLLists;
        public MaskItem<CopyOption, DebugSettings_CopyMask> Debug;
        public MaskItem<CopyOption, CountSettings_CopyMask> Count;
        public MaskItem<CopyOption, SpawningPerformance_CopyMask> Performance;
        #endregion

    }

    public class ModSettings_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Enabled;
        public bool LowTierReductionLine;
        public bool LowTierCutLine;
        public bool HighTierReductionLine;
        public bool HighTierCutLine;
        public bool EpicSpawnsEnabled;
        public bool EpicTierSoftCutLine;
        public bool EpicTierCutLine;
        public bool EpicTierPercentChance;
        public bool ForceTrueLevels;
        public bool ReviveDeadLLists;
        public MaskItem<bool, DebugSettings_TranslationMask> Debug;
        public MaskItem<bool, CountSettings_TranslationMask> Count;
        public MaskItem<bool, SpawningPerformance_TranslationMask> Performance;
        #endregion

        #region Ctors
        public ModSettings_TranslationMask()
        {
        }

        public ModSettings_TranslationMask(bool defaultOn)
        {
            this.Enabled = defaultOn;
            this.LowTierReductionLine = defaultOn;
            this.LowTierCutLine = defaultOn;
            this.HighTierReductionLine = defaultOn;
            this.HighTierCutLine = defaultOn;
            this.EpicSpawnsEnabled = defaultOn;
            this.EpicTierSoftCutLine = defaultOn;
            this.EpicTierCutLine = defaultOn;
            this.EpicTierPercentChance = defaultOn;
            this.ForceTrueLevels = defaultOn;
            this.ReviveDeadLLists = defaultOn;
            this.Debug = new MaskItem<bool, DebugSettings_TranslationMask>(defaultOn, null);
            this.Count = new MaskItem<bool, CountSettings_TranslationMask>(defaultOn, null);
            this.Performance = new MaskItem<bool, SpawningPerformance_TranslationMask>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Enabled, null));
            ret.Add((LowTierReductionLine, null));
            ret.Add((LowTierCutLine, null));
            ret.Add((HighTierReductionLine, null));
            ret.Add((HighTierCutLine, null));
            ret.Add((EpicSpawnsEnabled, null));
            ret.Add((EpicTierSoftCutLine, null));
            ret.Add((EpicTierCutLine, null));
            ret.Add((EpicTierPercentChance, null));
            ret.Add((ForceTrueLevels, null));
            ret.Add((ReviveDeadLLists, null));
            ret.Add((Debug?.Overall ?? true, Debug?.Specific?.GetCrystal()));
            ret.Add((Count?.Overall ?? true, Count?.Specific?.GetCrystal()));
            ret.Add((Performance?.Overall ?? true, Performance?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
